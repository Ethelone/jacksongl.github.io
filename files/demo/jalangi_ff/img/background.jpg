/*
 * Copyright 2013 University of California, Berkeley.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Author: Liang Gong, Koushik Sen
// For HTML5 Webworker or in-browser execution

((function (sandbox2) {
try {
	esnstrument = {};
	
	var workerId;

	var path = {};
	path.resolve = function (__dirname, file_path) {
		console.log('------------' + __dirname + " + " + file_path + "resolve -> ");
		var tmp_path = __dirname + file_path;
		var arr = tmp_path.split('/');
		var new_arr = [];
		var skip = 0;
		for (var i = tmp_path.length - 1; i >= 0; i--) {
			if (arr == '..') {
				skip++;
			} else if (arr == '.') {
				//do nothing
			} else if (skip > 0) {
				skip--;
			} else {
				new_arr.unshift(arr[i]);
			}
		}

		//linux
		var result = "";
		while (arr.length > 0) {
			result = result + "/" + arr.shift();
		}
		console.log(result);

		return result;
	};

	//  path.basename('/foo/bar/baz/asdf/quux.html')
	// returns
	//'quux.html'

	//path.basename('/foo/bar/baz/asdf/quux.html', '.html')
	// returns
	//'quux'
	path.basename = function (filename, suffix) {
		var ret;
		try {
			var arr = filename.split('/');
			ret = arr[arr.length - 1];
			if (typeof suffix == 'string') {
				var lastIndex = ret.lastIndexOf(suffix);
				if (lastIndex >= 0) {
					if (lastIndex + suffix.length == ret.length) {
						ret = ret.substring(0, lastIndex);
					}
				}
			}
		} catch (e) {
			console.log(e);
			console.log(e.stack);
			return undefined;
		}

		return ret;
	};
	
	

	HashSet = function (t, n) {
		var e = new Hashtable(t, n);
		this.add = function (t) {
			e.put(t, !0)
		},
		this.addAll = function (t) {
			for (var n = 0, r = t.length; r > n; ++n)
				e.put(t[n], !0)
		},
		this.values = function () {
			return e.keys()
		},
		this.remove = function (t) {
			return e.remove(t) ? t : null
		},
		this.contains = function (t) {
			return e.containsKey(t)
		},
		this.clear = function () {
			e.clear()
		},
		this.size = function () {
			return e.size()
		},
		this.isEmpty = function () {
			return e.isEmpty()
		},
		this.clone = function () {
			var r = new HashSet(t, n);
			return r.addAll(e.keys()),
			r
		},
		this.intersection = function (r) {
			for (var i, u = new HashSet(t, n), o = r.values(), s = o.length; s--; )
				i = o[s], e.containsKey(i) && u.add(i);
			return u
		},
		this.union = function (t) {
			for (var n, r = this.clone(), i = t.values(), u = i.length; u--; )
				n = i[u], e.containsKey(n) || r.add(n);
			return r
		},
		this.isSubsetOf = function (t) {
			for (var n = e.keys(), r = n.length; r--; )
				if (!t.contains(n[r]))
					return !1;
			return !0
		},
		this.complement = function (e) {
			for (var r, i = new HashSet(t, n), u = this.values(), o = u.length; o--; )
				r = u[o], e.contains(r) || i.add(r);
			return i
		},
		this.elements = function () {
			return e.keys();
		}
	}
	
	

	Hashtable = function (t) {
		function n(t) {
			return typeof t == p ? t : "" + t
		}

		function e(t) {
			var r;
			return typeof t == p ? t : typeof t.hashCode == y ? (r = t.hashCode(), typeof r == p ? r : e(r)) : n(t)
		}

		function r(t, n) {
			for (var e in n)
				n.hasOwnProperty(e) && (t[e] = n[e])
		}

		function i(t, n) {
			return t.equals(n)
		}

		function u(t, n) {
			return typeof n.equals == y ? n.equals(t) : t === n
		}

		function o(n) {
			return function (e) {
				if (null === e)
					throw new Error("null is not a valid " + n);
				if (e === t)
					throw new Error(n + " must not be undefined")
			}
		}

		function s(t, n, e, r) {
			this[0] = t,
			this.entries = [],
			this.addEntry(n, e),
			null !== r && (this.getEqualityFunction = function () {
				return r
			})
		}

		function a(t) {
			return function (n) {
				for (var e, r = this.entries.length, i = this.getEqualityFunction(n); r--; )
					if (e = this.entries[r], i(n, e[0]))
						switch (t) {
						case E:
							return !0;
						case K:
							return e;
						case q:
							return [r, e[1]]
						}
				return !1
			}
		}

		function l(t) {
			return function (n) {
				for (var e = n.length, r = 0, i = this.entries, u = i.length; u > r; ++r)
					n[e + r] = i[r][t]
			}
		}

		function f(t, n) {
			for (var e, r = t.length; r--; )
				if (e = t[r], n === e[0])
					return r;
			return null
		}

		function h(t, n) {
			var e = t[n];
			return e && e instanceof s ? e : null
		}

		function c() {
			var n = [],
			i = {},
			u = {
				replaceDuplicateKey : !0,
				hashCode : e,
				equals : null
			},
			o = arguments[0],
			a = arguments[1];
			a !== t ? (u.hashCode = o, u.equals = a) : o !== t && r(u, o);
			var l = u.hashCode,
			c = u.equals;
			this.properties = u,
			this.put = function (t, e) {
				g(t),
				d(e);
				var r,
				o,
				a = l(t),
				f = null;
				return r = h(i, a),
				r ? (o = r.getEntryForKey(t), o ? (u.replaceDuplicateKey && (o[0] = t), f = o[1], o[1] = e) : r.addEntry(t, e)) : (r = new s(a, t, e, c), n.push(r), i[a] = r),
				f
			},
			this.get = function (t) {
				g(t);
				var n = l(t),
				e = h(i, n);
				if (e) {
					var r = e.getEntryForKey(t);
					if (r)
						return r[1]
				}
				return null
			},
			this.containsKey = function (t) {
				g(t);
				var n = l(t),
				e = h(i, n);
				return e ? e.containsKey(t) : !1
			},
			this.containsValue = function (t) {
				d(t);
				for (var e = n.length; e--; )
					if (n[e].containsValue(t))
						return !0;
				return !1
			},
			this.clear = function () {
				n.length = 0,
				i = {}
			},
			this.isEmpty = function () {
				return !n.length
			};
			var y = function (t) {
				return function () {
					for (var e = [], r = n.length; r--; )
						n[r][t](e);
					return e
				}
			};
			this.keys = y("keys"),
			this.values = y("values"),
			this.entries = y("getEntries"),
			this.remove = function (t) {
				g(t);
				var e,
				r = l(t),
				u = null,
				o = h(i, r);
				return o && (u = o.removeEntryForKey(t), null !== u && 0 == o.entries.length && (e = f(n, r), n.splice(e, 1), delete i[r])),
				u
			},
			this.size = function () {
				for (var t = 0, e = n.length; e--; )
					t += n[e].entries.length;
				return t
			}
		}

		var y = "function",
		p = "string",
		v = "undefined";
		if (typeof encodeURIComponent == v || Array.prototype.splice === t || Object.prototype.hasOwnProperty === t)
			return null;
		var g = o("key"),
		d = o("value"),
		E = 0,
		K = 1,
		q = 2;
		return s.prototype = {
			getEqualityFunction : function (t) {
				return typeof t.equals == y ? i : u
			},
			getEntryForKey : a(K),
			getEntryAndIndexForKey : a(q),
			removeEntryForKey : function (t) {
				var n = this.getEntryAndIndexForKey(t);
				return n ? (this.entries.splice(n[0], 1), n[1]) : null
			},
			addEntry : function (t, n) {
				this.entries.push([t, n])
			},
			keys : l(0),
			values : l(1),
			getEntries : function (t) {
				for (var n = t.length, e = 0, r = this.entries, i = r.length; i > e; ++e)
					t[n + e] = r[e].slice(0)
			},
			containsKey : a(E),
			containsValue : function (t) {
				for (var n = this.entries, e = n.length; e--; )
					if (t === n[e][1])
						return !0;
				return !1
			}
		},
		c.prototype = {
			each : function (t) {
				for (var n, e = this.entries(), r = e.length; r--; )
					n = e[r], t(n[0], n[1])
			},
			equals : function (t) {
				var n,
				e,
				r,
				i = this.size();
				if (i == t.size()) {
					for (n = this.keys(); i--; )
						if (e = n[i], r = t.get(e), null === r || r !== this.get(e))
							return !1;
					return !0
				}
				return !1
			},
			putAll : function (t, n) {
				for (var e, r, i, u, o = t.entries(), s = o.length, a = typeof n == y; s--; )
					e = o[s], r = e[0], i = e[1], a && (u = this.get(r)) && (i = n(r, u, i)), this.put(r, i)
			},
			clone : function () {
				var t = new c(this.properties);
				return t.putAll(this),
				t
			}
		},
		c.prototype.toQueryString = function () {
			for (var t, e = this.entries(), r = e.length, i = []; r--; )
				t = e[r], i[r] = encodeURIComponent(n(t[0])) + "=" + encodeURIComponent(n(t[1]));
			return i.join("&")
		},
		c
	}
	();

	var ext_config = {
		addon_base_dir : '/home/jacksongl/JacksonGL_Ubuntu_Workspace/Codebase/Jalangi_FF_extension/Firefox Extension/Firefox_Addon_SDK/addon-sdk-1.14/Jalangi_FF/',
		InputManagerUrl : 'https://raw.github.com/JacksonGL/Jalangi_ref/master/InputManager.js',
		analysisUrl : 'https://raw.github.com/JacksonGL/Jalangi_ref/master/analysis.js',
		analyzerUrl : 'https://raw.github.com/JacksonGL/Jalangi_ref/master/analyzer.js',
		//'https://raw.github.com/JacksonGL/Jalangi_ref/master/analysis2.js';
		//'https://raw.github.com/SRA-SiliconValley/jalangi/master/src/js/analysis.js';
		filter_list : ['http://www.google-analytics.com/ga.js', 'http://www.googletagservices.com/tag/js/gpt.js']
	};
	
	

	ext_config.tmp_js_code_dir = ext_config.addon_base_dir + 'data/fetched_code_snippets/';
	ext_config.analyzer_local_file_name = ext_config.addon_base_dir + 'lib/frontend/analyzer.js';
	ext_config.filter_list.push(ext_config.analysisUrl);
	ext_config.filter_list.push(ext_config.InputManagerUrl);
	ext_config.filter_list.push(ext_config.analyzerUrl);
	ext_config.transform_signature = '/*[J$ Transformed]*/';

	ext_config.events_to_listen = new HashSet();

	//all possible javascript events (not sure if this is complete)
	var events = ['oncopy',
		'oncut',
		'onpaste',
		'onabort',
		'oncanplay',
		'oncanplaythrough',
		'onchange',
		'onclick',
		'oncontextmenu',
		'ondblclick',
		'ondrag',
		'ondragend',
		'ondragenter',
		'ondragleave',
		'ondragover',
		'ondragstart',
		'ondrop',
		'ondurationchange',
		'onemptied',
		'onended',
		'oninput',
		'oninvalid',
		'onkeydown',
		'onkeypress',
		'onkeyup',
		'onloadeddata',
		'onloadedmetadata',
		'onloadstart',
		'onmousedown',
		'onmousemove',
		'onmouseout',
		'onmouseover',
		'onmouseup',
		'onpause',
		'onplay',
		'onplaying',
		'onprogress',
		'onratechange',
		'onreset',
		'onseeked',
		'onseeking',
		'onselect',
		'onshow',
		'onstalled',
		'onsubmit',
		'onsuspend',
		'ontimeupdate',
		'onvolumechange',
		'onwaiting',
		'onmozfullscreenchange',
		'onmozfullscreenerror',
		'onmozpointerlockchange',
		'onmozpointerlockerror',
		'onblur',
		'onerror',
		'onfocus',
		'onload',
		'onscroll',
		'onmouseenter',
		'onmouseleave',
		'onwheel'];

	ext_config.events_to_listen.addAll(events);
	//for(var i=0;i<events.length;i++){
	//  ext_config.events_to_listen.add(events[i]);
	//}

	ext_config.instrumentCodeLengthLimit = 500 * 1000;
	ext_config.is_remove_use_strict = true;
	ext_config.isHandleWebWorker = true;
	ext_config.handWebWorkerCode = "\r\n try{ if( ((typeof window) == 'undefined') && ((typeof self) != 'undefined') && ((typeof importScripts) != 'undefined') && ((typeof J$) == 'undefined') ){ importScripts('" + ext_config.analysisUrl + "'); \r\n importScripts('" + ext_config.InputManagerUrl + "');} \r\n }catch(e){throw e;} \r\n"

		ext_config.isExtensionEvn = true;
	ext_config.isNodeJsEvn = false;
	ext_config.isBrowserJsEvn = false;
	ext_config.isInstrumentCodeForReplay = false;
	ext_config.recordFileTraceFolder = ext_config.addon_base_dir + 'data/record/';

	ext_config.isSaveInstrumentedPageAndFiles = false;

	ext_config.nodejs_analysis_js_path = '/home/jacksongl/JacksonGL_Ubuntu_Workspace/research/jalangi/jalangi-multiPaper/src/js/analysis.js';
	ext_config.nodejs_inputmanager_js_path = '/home/jacksongl/JacksonGL_Ubuntu_Workspace/research/jalangi/jalangi-multiPaper/src/js/InputManager.js';
	ext_config.nodejs_esnstrument_js_path = '/home/jacksongl/JacksonGL_Ubuntu_Workspace/research/jalangi/jalangi-multiPaper/src/js/instrument/esnstrument.js';

	function check_filter_list(url) {
		for (var i = 0; i < ext_config.filter_list.length; i++) {
			if (ext_config.filter_list[i] == url) {
				return true;
			}
		}
		return false;
	}

	var exports = {};

	(function (root, factory) {
		'use strict';

		// Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,
		// and plain browser loading,
		if (typeof define === 'function' && define.amd) {
			define(['exports'], factory);
		} else if (typeof exports !== 'undefined') {
			factory(exports);
		} else {
			factory((root.estraverse = {}));
		}
	}
		(this, function (exports) {
			'use strict';

			var Syntax,
			isArray,
			VisitorOption,
			VisitorKeys,
			BREAK,
			SKIP;

			Syntax = {
				AssignmentExpression : 'AssignmentExpression',
				ArrayExpression : 'ArrayExpression',
				ArrowFunctionExpression : 'ArrowFunctionExpression',
				BlockStatement : 'BlockStatement',
				BinaryExpression : 'BinaryExpression',
				BreakStatement : 'BreakStatement',
				CallExpression : 'CallExpression',
				CatchClause : 'CatchClause',
				ConditionalExpression : 'ConditionalExpression',
				ContinueStatement : 'ContinueStatement',
				DebuggerStatement : 'DebuggerStatement',
				DirectiveStatement : 'DirectiveStatement',
				DoWhileStatement : 'DoWhileStatement',
				EmptyStatement : 'EmptyStatement',
				ExpressionStatement : 'ExpressionStatement',
				ForStatement : 'ForStatement',
				ForInStatement : 'ForInStatement',
				FunctionDeclaration : 'FunctionDeclaration',
				FunctionExpression : 'FunctionExpression',
				Identifier : 'Identifier',
				IfStatement : 'IfStatement',
				Literal : 'Literal',
				LabeledStatement : 'LabeledStatement',
				LogicalExpression : 'LogicalExpression',
				MemberExpression : 'MemberExpression',
				NewExpression : 'NewExpression',
				ObjectExpression : 'ObjectExpression',
				Program : 'Program',
				Property : 'Property',
				ReturnStatement : 'ReturnStatement',
				SequenceExpression : 'SequenceExpression',
				SwitchStatement : 'SwitchStatement',
				SwitchCase : 'SwitchCase',
				ThisExpression : 'ThisExpression',
				ThrowStatement : 'ThrowStatement',
				TryStatement : 'TryStatement',
				UnaryExpression : 'UnaryExpression',
				UpdateExpression : 'UpdateExpression',
				VariableDeclaration : 'VariableDeclaration',
				VariableDeclarator : 'VariableDeclarator',
				WhileStatement : 'WhileStatement',
				WithStatement : 'WithStatement',
				YieldExpression : 'YieldExpression'
			};

			function ignoreJSHintError() {}

			isArray = Array.isArray;
			if (!isArray) {
				isArray = function isArray(array) {
					return Object.prototype.toString.call(array) === '[object Array]';
				};
			}

			function deepCopy(obj) {
				var ret = {},
				key,
				val;
				for (key in obj) {
					if (obj.hasOwnProperty(key)) {
						val = obj[key];
						if (typeof val === 'object' && val !== null) {
							ret[key] = deepCopy(val);
						} else {
							ret[key] = val;
						}
					}
				}
				return ret;
			}

			function shallowCopy(obj) {
				var ret = {},
				key;
				for (key in obj) {
					if (obj.hasOwnProperty(key)) {
						ret[key] = obj[key];
					}
				}
				return ret;
			}
			ignoreJSHintError(shallowCopy);

			// based on LLVM libc++ upper_bound / lower_bound
			// MIT License

			function upperBound(array, func) {
				var diff,
				len,
				i,
				current;

				len = array.length;
				i = 0;
				while (len) {
					diff = len >>> 1;
					current = i + diff;
					if (func(array[current])) {
						len = diff;
					} else {
						i = current + 1;
						len -= diff + 1;
					}
				}
				return i;
			}

			function lowerBound(array, func) {
				var diff,
				len,
				i,
				current;

				len = array.length;
				i = 0;
				while (len) {
					diff = len >>> 1;
					current = i + diff;
					if (func(array[current])) {
						i = current + 1;
						len -= diff + 1;
					} else {
						len = diff;
					}
				}
				return i;
			}
			ignoreJSHintError(lowerBound);

			VisitorKeys = {
				AssignmentExpression : ['left', 'right'],
				ArrayExpression : ['elements'],
				ArrowFunctionExpression : ['params', 'body'],
				BlockStatement : ['body'],
				BinaryExpression : ['left', 'right'],
				BreakStatement : ['label'],
				CallExpression : ['callee', 'arguments'],
				CatchClause : ['param', 'body'],
				ConditionalExpression : ['test', 'consequent', 'alternate'],
				ContinueStatement : ['label'],
				DebuggerStatement : [],
				DirectiveStatement : [],
				DoWhileStatement : ['body', 'test'],
				EmptyStatement : [],
				ExpressionStatement : ['expression'],
				ForStatement : ['init', 'test', 'update', 'body'],
				ForInStatement : ['left', 'right', 'body'],
				FunctionDeclaration : ['id', 'params', 'body'],
				FunctionExpression : ['id', 'params', 'body'],
				Identifier : [],
				IfStatement : ['test', 'consequent', 'alternate'],
				Literal : [],
				LabeledStatement : ['label', 'body'],
				LogicalExpression : ['left', 'right'],
				MemberExpression : ['object', 'property'],
				NewExpression : ['callee', 'arguments'],
				ObjectExpression : ['properties'],
				Program : ['body'],
				Property : ['key', 'value'],
				ReturnStatement : ['argument'],
				SequenceExpression : ['expressions'],
				SwitchStatement : ['discriminant', 'cases'],
				SwitchCase : ['test', 'consequent'],
				ThisExpression : [],
				ThrowStatement : ['argument'],
				TryStatement : ['block', 'handlers', 'handler', 'guardedHandlers', 'finalizer'],
				UnaryExpression : ['argument'],
				UpdateExpression : ['argument'],
				VariableDeclaration : ['declarations'],
				VariableDeclarator : ['id', 'init'],
				WhileStatement : ['test', 'body'],
				WithStatement : ['object', 'body'],
				YieldExpression : ['argument']
			};

			// unique id
			BREAK = {};
			SKIP = {};

			VisitorOption = {
				Break : BREAK,
				Skip : SKIP
			};

			function Reference(parent, key) {
				this.parent = parent;
				this.key = key;
			}

			Reference.prototype.replace = function replace(node) {
				this.parent[this.key] = node;
			};

			function Element(node, path, wrap, ref) {
				this.node = node;
				this.path = path;
				this.wrap = wrap;
				this.ref = ref;
			}

			function Controller() {}

			// API:
			// return property path array from root to current node
			Controller.prototype.path = function path() {
				var i,
				iz,
				j,
				jz,
				result,
				element;

				function addToPath(result, path) {
					if (isArray(path)) {
						for (j = 0, jz = path.length; j < jz; ++j) {
							result.push(path[j]);
						}
					} else {
						result.push(path);
					}
				}

				// root node
				if (!this.__current.path) {
					return null;
				}

				// first node is sentinel, second node is root element
				result = [];
				for (i = 2, iz = this.__leavelist.length; i < iz; ++i) {
					element = this.__leavelist[i];
					addToPath(result, element.path);
				}
				addToPath(result, this.__current.path);
				return result;
			};

			// API:
			// return array of parent elements
			Controller.prototype.parents = function parents() {
				var i,
				iz,
				result;

				// first node is sentinel
				result = [];
				for (i = 1, iz = this.__leavelist.length; i < iz; ++i) {
					result.push(this.__leavelist[i].node);
				}

				return result;
			};

			// API:
			// return current node
			Controller.prototype.current = function current() {
				return this.__current.node;
			};

			Controller.prototype.__execute = function __execute(callback, element) {
				var previous,
				result;

				result = undefined;

				previous = this.__current;
				this.__current = element;
				this.__state = null;
				if (callback) {
					result = callback.call(this, element.node, this.__leavelist[this.__leavelist.length - 1].node);
				}
				this.__current = previous;

				return result;
			};

			// API:
			// notify control skip / break
			Controller.prototype.notify = function notify(flag) {
				this.__state = flag;
			};

			// API:
			// skip child nodes of current node
			Controller.prototype.skip = function () {
				this.notify(SKIP);
			};

			// API:
			// break traversals
			Controller.prototype['break'] = function () {
				this.notify(BREAK);
			};

			Controller.prototype.__initialize = function (root, visitor) {
				this.visitor = visitor;
				this.root = root;
				this.__worklist = [];
				this.__leavelist = [];
				this.__current = null;
				this.__state = null;
			};

			Controller.prototype.traverse = function traverse(root, visitor) {
				var worklist,
				leavelist,
				element,
				node,
				nodeType,
				ret,
				key,
				current,
				current2,
				candidates,
				candidate,
				sentinel;

				this.__initialize(root, visitor);

				sentinel = {};

				// reference
				worklist = this.__worklist;
				leavelist = this.__leavelist;

				// initialize
				worklist.push(new Element(root, null, null, null));
				leavelist.push(new Element(null, null, null, null));
				while (worklist.length) {
					element = worklist.pop();

					if (element === sentinel) {
						element = leavelist.pop();

						ret = this.__execute(visitor.leave, element);

						if (this.__state === BREAK || ret === BREAK) {
							return;
						}
						continue;
					}

					if (element.node) {

						ret = this.__execute(visitor.enter, element);

						if (this.__state === BREAK || ret === BREAK) {
							return;
						}

						worklist.push(sentinel);
						leavelist.push(element);

						if (this.__state === SKIP || ret === SKIP) {
							continue;
						}

						node = element.node;
						nodeType = element.wrap || node.type;
						candidates = VisitorKeys[nodeType];

						current = candidates.length;
						while ((current -= 1) >= 0) {
							key = candidates[current];
							candidate = node[key];
							if (!candidate) {
								continue;
							}

							if (!isArray(candidate)) {
								worklist.push(new Element(candidate, key, null, null));
								continue;
							}

							current2 = candidate.length;
							while ((current2 -= 1) >= 0) {
								if (!candidate[current2]) {
									continue;
								}
								if (nodeType === Syntax.ObjectExpression && 'properties' === candidates[current]) {
									element = new Element(candidate[current2], [key, current2], 'Property', null);
								} else {
									element = new Element(candidate[current2], [key, current2], null, null);
								}
								worklist.push(element);
							}
						}
					}
				}
			};
			
			

			Controller.prototype.replace = function replace(root, visitor) {
				var worklist,
				leavelist,
				node,
				nodeType,
				target,
				element,
				current,
				current2,
				candidates,
				candidate,
				sentinel,
				outer,
				key;

				this.__initialize(root, visitor);

				sentinel = {};

				// reference
				worklist = this.__worklist;
				leavelist = this.__leavelist;

				// initialize
				outer = {
					root : root
				};
				element = new Element(root, null, null, new Reference(outer, 'root'));
				worklist.push(element);
				leavelist.push(element);
				while (worklist.length) {
					element = worklist.pop();

					if (element === sentinel) {
						element = leavelist.pop();

						target = this.__execute(visitor.leave, element);

						// node may be replaced with null,
						// so distinguish between undefined and null in this place
						if (target !== undefined && target !== BREAK && target !== SKIP) {
							// replace
							element.ref.replace(target);
						}

						if (this.__state === BREAK || target === BREAK) {
							return outer.root;
						}
						continue;
					}

					target = this.__execute(visitor.enter, element);

					// node may be replaced with null,
					// so distinguish between undefined and null in this place
					if (target !== undefined && target !== BREAK && target !== SKIP) {
						// replace
						element.ref.replace(target);
						element.node = target;
					}

					if (this.__state === BREAK || target === BREAK) {
						return outer.root;
					}

					// node may be null
					node = element.node;
					if (!node) {
						continue;
					}

					worklist.push(sentinel);
					leavelist.push(element);

					if (this.__state === SKIP || target === SKIP) {
						continue;
					}

					nodeType = element.wrap || node.type;
					candidates = VisitorKeys[nodeType];

					current = candidates.length;
					while ((current -= 1) >= 0) {
						key = candidates[current];
						candidate = node[key];
						if (!candidate) {
							continue;
						}

						if (!isArray(candidate)) {
							worklist.push(new Element(candidate, key, null, new Reference(node, key)));
							continue;
						}

						current2 = candidate.length;
						while ((current2 -= 1) >= 0) {
							if (!candidate[current2]) {
								continue;
							}
							if (nodeType === Syntax.ObjectExpression && 'properties' === candidates[current]) {
								element = new Element(candidate[current2], [key, current2], 'Property', new Reference(candidate, current2));
							} else {
								element = new Element(candidate[current2], [key, current2], null, new Reference(candidate, current2));
							}
							worklist.push(element);
						}
					}
				}

				return outer.root;
			};
			
			

			function traverse(root, visitor) {
				var controller = new Controller();
				return controller.traverse(root, visitor);
			}

			function replace(root, visitor) {
				var controller = new Controller();
				return controller.replace(root, visitor);
			}

			function extendCommentRange(comment, tokens) {
				var target,
				token;

				target = upperBound(tokens, function search(token) {
						return token.range[0] > comment.range[0];
					});

				comment.extendedRange = [comment.range[0], comment.range[1]];

				if (target !== tokens.length) {
					comment.extendedRange[1] = tokens[target].range[0];
				}

				target -= 1;
				if (target >= 0) {
					if (target < tokens.length) {
						comment.extendedRange[0] = tokens[target].range[1];
					} else if (token.length) {
						comment.extendedRange[1] = tokens[tokens.length - 1].range[0];
					}
				}

				return comment;
			}

			function attachComments(tree, providedComments, tokens) {
				// At first, we should calculate extended comment ranges.
				var comments = [],
				comment,
				len,
				i,
				cursor;

				if (!tree.range) {
					throw new Error('attachComments needs range information');
				}

				// tokens array is empty, we attach comments to tree as 'leadingComments'
				if (!tokens.length) {
					if (providedComments.length) {
						for (i = 0, len = providedComments.length; i < len; i += 1) {
							comment = deepCopy(providedComments[i]);
							comment.extendedRange = [0, tree.range[0]];
							comments.push(comment);
						}
						tree.leadingComments = comments;
					}
					return tree;
				}

				for (i = 0, len = providedComments.length; i < len; i += 1) {
					comments.push(extendCommentRange(deepCopy(providedComments[i]), tokens));
				}

				// This is based on John Freeman's implementation.
				cursor = 0;
				traverse(tree, {
					enter : function (node) {
						var comment;
						while (cursor < comments.length) {
							comment = comments[cursor];
							if (comment.extendedRange[1] > node.range[0]) {
								break;
							}

							if (comment.extendedRange[1] === node.range[0]) {
								if (!node.leadingComments) {
									node.leadingComments = [];
								}
								node.leadingComments.push(comment);
								comments.splice(cursor, 1);
							} else {
								cursor += 1;
							}
						}

						// already out of owned node
						if (cursor === comments.length) {
							return VisitorOption.Break;
						}

						if (comments[cursor].extendedRange[0] > node.range[1]) {
							return VisitorOption.Skip;
						}
					}
				});

				cursor = 0;
				traverse(tree, {
					leave : function (node) {
						var comment;
						while (cursor < comments.length) {
							comment = comments[cursor];
							if (node.range[1] < comment.extendedRange[0]) {
								break;
							}

							if (node.range[1] === comment.extendedRange[0]) {
								if (!node.trailingComments) {
									node.trailingComments = [];
								}
								node.trailingComments.push(comment);
								comments.splice(cursor, 1);
							} else {
								cursor += 1;
							}
						}

						// already out of owned node
						if (cursor === comments.length) {
							return VisitorOption.Break;
						}

						if (comments[cursor].extendedRange[0] > node.range[1]) {
							return VisitorOption.Skip;
						}
					}
				});

				return tree;
			}

			exports.version = '1.3.2-dev';
			exports.Syntax = Syntax;
			exports.traverse = traverse;
			exports.replace = replace;
			exports.attachComments = attachComments;
			exports.VisitorKeys = VisitorKeys;
			exports.VisitorOption = VisitorOption;
			exports.Controller = Controller;
		}));

	var estraverse = exports;

	exports = {};
	
	

	/**
	 * SourceNodes provide a way to abstract over interpolating/concatenating
	 * snippets of generated JavaScript source code while maintaining the line and
	 * column information associated with the original source code.
	 *
	 * @param aLine The original line number.
	 * @param aColumn The original column number.
	 * @param aSource The original source's filename.
	 * @param aChunks Optional. An array of strings which are snippets of
	 *        generated JS, or other SourceNodes.
	 * @param aName The original identifier.
	 */
	function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
		this.children = [];
		this.sourceContents = {};
		this.line = aLine === undefined ? null : aLine;
		this.column = aColumn === undefined ? null : aColumn;
		this.source = aSource === undefined ? null : aSource;
		this.name = aName === undefined ? null : aName;
		if (aChunks != null)
			this.add(aChunks);
	}

	/**
	 * Creates a SourceNode from generated code and a SourceMapConsumer.
	 *
	 * @param aGeneratedCode The generated code
	 * @param aSourceMapConsumer The SourceMap for the generated code
	 */
	SourceNode.fromStringWithSourceMap =
	function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer) {
		// The SourceNode we want to fill with the generated code
		// and the SourceMap
		var node = new SourceNode();

		// The generated code
		// Processed fragments are removed from this array.
		var remainingLines = aGeneratedCode.split('\n');

		// We need to remember the position of "remainingLines"
		var lastGeneratedLine = 1,
		lastGeneratedColumn = 0;

		// The generate SourceNodes we need a code range.
		// To extract it current and last mapping is used.
		// Here we store the last mapping.
		var lastMapping = null;

		aSourceMapConsumer.eachMapping(function (mapping) {
			if (lastMapping === null) {
				// We add the generated code until the first mapping
				// to the SourceNode without any mapping.
				// Each line is added as separate string.
				while (lastGeneratedLine < mapping.generatedLine) {
					node.add(remainingLines.shift() + "\n");
					lastGeneratedLine++;
				}
				if (lastGeneratedColumn < mapping.generatedColumn) {
					var nextLine = remainingLines[0];
					node.add(nextLine.substr(0, mapping.generatedColumn));
					remainingLines[0] = nextLine.substr(mapping.generatedColumn);
					lastGeneratedColumn = mapping.generatedColumn;
				}
			} else {
				// We add the code from "lastMapping" to "mapping":
				// First check if there is a new line in between.
				if (lastGeneratedLine < mapping.generatedLine) {
					var code = "";
					// Associate full lines with "lastMapping"
					do {
						code += remainingLines.shift() + "\n";
						lastGeneratedLine++;
						lastGeneratedColumn = 0;
					} while (lastGeneratedLine < mapping.generatedLine);
					// When we reached the correct line, we add code until we
					// reach the correct column too.
					if (lastGeneratedColumn < mapping.generatedColumn) {
						var nextLine = remainingLines[0];
						code += nextLine.substr(0, mapping.generatedColumn);
						remainingLines[0] = nextLine.substr(mapping.generatedColumn);
						lastGeneratedColumn = mapping.generatedColumn;
					}
					// Create the SourceNode.
					addMappingWithCode(lastMapping, code);
				} else {
					// There is no new line in between.
					// Associate the code between "lastGeneratedColumn" and
					// "mapping.generatedColumn" with "lastMapping"
					var nextLine = remainingLines[0];
					var code = nextLine.substr(0, mapping.generatedColumn -
							lastGeneratedColumn);
					remainingLines[0] = nextLine.substr(mapping.generatedColumn -
							lastGeneratedColumn);
					lastGeneratedColumn = mapping.generatedColumn;
					addMappingWithCode(lastMapping, code);
				}
			}
			lastMapping = mapping;
		}, this);
		// We have processed all mappings.
		// Associate the remaining code in the current line with "lastMapping"
		// and add the remaining lines without any mapping
		addMappingWithCode(lastMapping, remainingLines.join("\n"));

		// Copy sourcesContent into SourceNode
		aSourceMapConsumer.sources.forEach(function (sourceFile) {
			var content = aSourceMapConsumer.sourceContentFor(sourceFile);
			if (content) {
				node.setSourceContent(sourceFile, content);
			}
		});

		return node;

		function addMappingWithCode(mapping, code) {
			if (mapping === null || mapping.source === undefined) {
				node.add(code);
			} else {
				node.add(new SourceNode(mapping.originalLine,
						mapping.originalColumn,
						mapping.source,
						code,
						mapping.name));
			}
		}
	};

	/**
	 * Add a chunk of generated JS to this source node.
	 *
	 * @param aChunk A string snippet of generated JS code, another instance of
	 *        SourceNode, or an array where each member is one of those things.
	 */
	SourceNode.prototype.add = function SourceNode_add(aChunk) {
		if (Array.isArray(aChunk)) {
			aChunk.forEach(function (chunk) {
				this.add(chunk);
			}, this);
		} else if (aChunk instanceof SourceNode || typeof aChunk === "string") {
			if (aChunk) {
				this.children.push(aChunk);
			}
		} else {
			throw new TypeError(
				"Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
		}
		return this;
	};

	/**
	 * Add a chunk of generated JS to the beginning of this source node.
	 *
	 * @param aChunk A string snippet of generated JS code, another instance of
	 *        SourceNode, or an array where each member is one of those things.
	 */
	SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
		if (Array.isArray(aChunk)) {
			for (var i = aChunk.length - 1; i >= 0; i--) {
				this.prepend(aChunk[i]);
			}
		} else if (aChunk instanceof SourceNode || typeof aChunk === "string") {
			this.children.unshift(aChunk);
		} else {
			throw new TypeError(
				"Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
		}
		return this;
	};

	/**
	 * Walk over the tree of JS snippets in this node and its children. The
	 * walking function is called once for each snippet of JS and is passed that
	 * snippet and the its original associated source's line/column location.
	 *
	 * @param aFn The traversal function.
	 */
	SourceNode.prototype.walk = function SourceNode_walk(aFn) {
		var chunk;
		for (var i = 0, len = this.children.length; i < len; i++) {
			chunk = this.children[i];
			if (chunk instanceof SourceNode) {
				chunk.walk(aFn);
			} else {
				if (chunk !== '') {
					aFn(chunk, {
						source : this.source,
						line : this.line,
						column : this.column,
						name : this.name
					});
				}
			}
		}
	};

	/**
	 * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
	 * each of `this.children`.
	 *
	 * @param aSep The separator.
	 */
	SourceNode.prototype.join = function SourceNode_join(aSep) {
		var newChildren;
		var i;
		var len = this.children.length;
		if (len > 0) {
			newChildren = [];
			for (i = 0; i < len - 1; i++) {
				newChildren.push(this.children[i]);
				newChildren.push(aSep);
			}
			newChildren.push(this.children[i]);
			this.children = newChildren;
		}
		return this;
	};

	/**
	 * Call String.prototype.replace on the very right-most source snippet. Useful
	 * for trimming whitespace from the end of a source node, etc.
	 *
	 * @param aPattern The pattern to replace.
	 * @param aReplacement The thing to replace the pattern with.
	 */
	SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
		var lastChild = this.children[this.children.length - 1];
		if (lastChild instanceof SourceNode) {
			lastChild.replaceRight(aPattern, aReplacement);
		} else if (typeof lastChild === 'string') {
			this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
		} else {
			this.children.push(''.replace(aPattern, aReplacement));
		}
		return this;
	};

	/**
	 * Set the source content for a source file. This will be added to the SourceMapGenerator
	 * in the sourcesContent field.
	 *
	 * @param aSourceFile The filename of the source file
	 * @param aSourceContent The content of the source file
	 */
	SourceNode.prototype.setSourceContent =
	function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
		this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
	};

	/**
	 * Walk over the tree of SourceNodes. The walking function is called for each
	 * source file content and is passed the filename and source content.
	 *
	 * @param aFn The traversal function.
	 */
	SourceNode.prototype.walkSourceContents =
	function SourceNode_walkSourceContents(aFn) {
		for (var i = 0, len = this.children.length; i < len; i++) {
			if (this.children[i]instanceof SourceNode) {
				this.children[i].walkSourceContents(aFn);
			}
		}

		var sources = Object.keys(this.sourceContents);
		for (var i = 0, len = sources.length; i < len; i++) {
			aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
		}
	};

	/**
	 * Return the string representation of this source node. Walks over the tree
	 * and concatenates all the various snippets together to one string.
	 */
	SourceNode.prototype.toString = function SourceNode_toString() {
		var str = "";
		this.walk(function (chunk) {
			str += chunk;
		});
		return str;
	};

	/**
	 * Returns the string representation of this source node along with a source
	 * map.
	 */
	SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
		var generated = {
			code : "",
			line : 1,
			column : 0
		};
		var map = new SourceMapGenerator(aArgs);
		var sourceMappingActive = false;
		var lastOriginalSource = null;
		var lastOriginalLine = null;
		var lastOriginalColumn = null;
		var lastOriginalName = null;
		this.walk(function (chunk, original) {
			generated.code += chunk;
			if (original.source !== null
				 && original.line !== null
				 && original.column !== null) {
				if (lastOriginalSource !== original.source
					 || lastOriginalLine !== original.line
					 || lastOriginalColumn !== original.column
					 || lastOriginalName !== original.name) {
					map.addMapping({
						source : original.source,
						original : {
							line : original.line,
							column : original.column
						},
						generated : {
							line : generated.line,
							column : generated.column
						},
						name : original.name
					});
				}
				lastOriginalSource = original.source;
				lastOriginalLine = original.line;
				lastOriginalColumn = original.column;
				lastOriginalName = original.name;
				sourceMappingActive = true;
			} else if (sourceMappingActive) {
				map.addMapping({
					generated : {
						line : generated.line,
						column : generated.column
					}
				});
				lastOriginalSource = null;
				sourceMappingActive = false;
			}
			chunk.split('').forEach(function (ch) {
				if (ch === '\n') {
					generated.line++;
					generated.column = 0;
				} else {
					generated.column++;
				}
			});
		});
		this.walkSourceContents(function (sourceFile, sourceContent) {
			map.setSourceContent(sourceFile, sourceContent);
		});

		return {
			code : generated.code,
			map : map
		};
	};
	
	

	(function () {
		'use strict';

		var Syntax,
		Precedence,
		BinaryPrecedence,
		Regex,
		//SourceNode,
		isArray,
		base,
		indent,
		json,
		renumber,
		hexadecimal,
		quotes,
		escapeless,
		newline,
		space,
		parentheses,
		semicolons,
		safeConcatenation,
		directive,
		extra,
		parse,
		sourceMap,
		FORMAT_MINIFY,
		FORMAT_DEFAULTS;

		//estraverse = require('../estraverse/estraverse.js');

		Syntax = {
			AssignmentExpression : 'AssignmentExpression',
			ArrayExpression : 'ArrayExpression',
			ArrayPattern : 'ArrayPattern',
			ArrowFunctionExpression : 'ArrowFunctionExpression',
			BlockStatement : 'BlockStatement',
			BinaryExpression : 'BinaryExpression',
			BreakStatement : 'BreakStatement',
			CallExpression : 'CallExpression',
			CatchClause : 'CatchClause',
			ComprehensionBlock : 'ComprehensionBlock',
			ComprehensionExpression : 'ComprehensionExpression',
			ConditionalExpression : 'ConditionalExpression',
			ContinueStatement : 'ContinueStatement',
			DirectiveStatement : 'DirectiveStatement',
			DoWhileStatement : 'DoWhileStatement',
			DebuggerStatement : 'DebuggerStatement',
			EmptyStatement : 'EmptyStatement',
			ExpressionStatement : 'ExpressionStatement',
			ForStatement : 'ForStatement',
			ForInStatement : 'ForInStatement',
			FunctionDeclaration : 'FunctionDeclaration',
			FunctionExpression : 'FunctionExpression',
			Identifier : 'Identifier',
			IfStatement : 'IfStatement',
			Literal : 'Literal',
			LabeledStatement : 'LabeledStatement',
			LogicalExpression : 'LogicalExpression',
			MemberExpression : 'MemberExpression',
			NewExpression : 'NewExpression',
			ObjectExpression : 'ObjectExpression',
			ObjectPattern : 'ObjectPattern',
			Program : 'Program',
			Property : 'Property',
			ReturnStatement : 'ReturnStatement',
			SequenceExpression : 'SequenceExpression',
			SwitchStatement : 'SwitchStatement',
			SwitchCase : 'SwitchCase',
			ThisExpression : 'ThisExpression',
			ThrowStatement : 'ThrowStatement',
			TryStatement : 'TryStatement',
			UnaryExpression : 'UnaryExpression',
			UpdateExpression : 'UpdateExpression',
			VariableDeclaration : 'VariableDeclaration',
			VariableDeclarator : 'VariableDeclarator',
			WhileStatement : 'WhileStatement',
			WithStatement : 'WithStatement',
			YieldExpression : 'YieldExpression'

		};

		Precedence = {
			Sequence : 0,
			Assignment : 1,
			Conditional : 2,
			ArrowFunction : 2,
			LogicalOR : 3,
			LogicalAND : 4,
			BitwiseOR : 5,
			BitwiseXOR : 6,
			BitwiseAND : 7,
			Equality : 8,
			Relational : 9,
			BitwiseSHIFT : 10,
			Additive : 11,
			Multiplicative : 12,
			Unary : 13,
			Postfix : 14,
			Call : 15,
			New : 16,
			Member : 17,
			Primary : 18
		};

		BinaryPrecedence = {
			'||' : Precedence.LogicalOR,
			'&&' : Precedence.LogicalAND,
			'|' : Precedence.BitwiseOR,
			'^' : Precedence.BitwiseXOR,
			'&' : Precedence.BitwiseAND,
			'==' : Precedence.Equality,
			'!=' : Precedence.Equality,
			'===' : Precedence.Equality,
			'!==' : Precedence.Equality,
			'is' : Precedence.Equality,
			'isnt' : Precedence.Equality,
			'<' : Precedence.Relational,
			'>' : Precedence.Relational,
			'<=' : Precedence.Relational,
			'>=' : Precedence.Relational,
			'in' : Precedence.Relational,
			'instanceof' : Precedence.Relational,
			'<<' : Precedence.BitwiseSHIFT,
			'>>' : Precedence.BitwiseSHIFT,
			'>>>' : Precedence.BitwiseSHIFT,
			'+' : Precedence.Additive,
			'-' : Precedence.Additive,
			'*' : Precedence.Multiplicative,
			'%' : Precedence.Multiplicative,
			'/' : Precedence.Multiplicative
		};

		Regex = {
			NonAsciiIdentifierPart : new RegExp('[\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0300-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u0483-\u0487\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u05d0-\u05ea\u05f0-\u05f2\u0610-\u061a\u0620-\u0669\u066e-\u06d3\u06d5-\u06dc\u06df-\u06e8\u06ea-\u06fc\u06ff\u0710-\u074a\u074d-\u07b1\u07c0-\u07f5\u07fa\u0800-\u082d\u0840-\u085b\u08a0\u08a2-\u08ac\u08e4-\u08fe\u0900-\u0963\u0966-\u096f\u0971-\u0977\u0979-\u097f\u0981-\u0983\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bc-\u09c4\u09c7\u09c8\u09cb-\u09ce\u09d7\u09dc\u09dd\u09df-\u09e3\u09e6-\u09f1\u0a01-\u0a03\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a59-\u0a5c\u0a5e\u0a66-\u0a75\u0a81-\u0a83\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abc-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ad0\u0ae0-\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3c-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b5c\u0b5d\u0b5f-\u0b63\u0b66-\u0b6f\u0b71\u0b82\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd0\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c58\u0c59\u0c60-\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbc-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0cde\u0ce0-\u0ce3\u0ce6-\u0cef\u0cf1\u0cf2\u0d02\u0d03\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d-\u0d44\u0d46-\u0d48\u0d4a-\u0d4e\u0d57\u0d60-\u0d63\u0d66-\u0d6f\u0d7a-\u0d7f\u0d82\u0d83\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e01-\u0e3a\u0e40-\u0e4e\u0e50-\u0e59\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb9\u0ebb-\u0ebd\u0ec0-\u0ec4\u0ec6\u0ec8-\u0ecd\u0ed0-\u0ed9\u0edc-\u0edf\u0f00\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e-\u0f47\u0f49-\u0f6c\u0f71-\u0f84\u0f86-\u0f97\u0f99-\u0fbc\u0fc6\u1000-\u1049\u1050-\u109d\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u135d-\u135f\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176c\u176e-\u1770\u1772\u1773\u1780-\u17d3\u17d7\u17dc\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u1820-\u1877\u1880-\u18aa\u18b0-\u18f5\u1900-\u191c\u1920-\u192b\u1930-\u193b\u1946-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u19d0-\u19d9\u1a00-\u1a1b\u1a20-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1aa7\u1b00-\u1b4b\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1bf3\u1c00-\u1c37\u1c40-\u1c49\u1c4d-\u1c7d\u1cd0-\u1cd2\u1cd4-\u1cf6\u1d00-\u1de6\u1dfc-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u200c\u200d\u203f\u2040\u2054\u2071\u207f\u2090-\u209c\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d7f-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2de0-\u2dff\u2e2f\u3005-\u3007\u3021-\u302f\u3031-\u3035\u3038-\u303c\u3041-\u3096\u3099\u309a\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua62b\ua640-\ua66f\ua674-\ua67d\ua67f-\ua697\ua69f-\ua6f1\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua827\ua840-\ua873\ua880-\ua8c4\ua8d0-\ua8d9\ua8e0-\ua8f7\ua8fb\ua900-\ua92d\ua930-\ua953\ua960-\ua97c\ua980-\ua9c0\ua9cf-\ua9d9\uaa00-\uaa36\uaa40-\uaa4d\uaa50-\uaa59\uaa60-\uaa76\uaa7a\uaa7b\uaa80-\uaac2\uaadb-\uaadd\uaae0-\uaaef\uaaf2-\uaaf6\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabea\uabec\uabed\uabf0-\uabf9\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\ufe70-\ufe74\ufe76-\ufefc\uff10-\uff19\uff21-\uff3a\uff3f\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc]')
		};

		function getDefaultOptions() {
			// default options
			return {
				indent : null,
				base : null,
				parse : null,
				comment : false,
				format : {
					indent : {
						style : '    ',
						base : 0,
						adjustMultilineComment : false
					},
					newline : '\n',
					space : ' ',
					json : false,
					renumber : false,
					hexadecimal : false,
					quotes : 'single',
					escapeless : false,
					compact : false,
					parentheses : true,
					semicolons : true,
					safeConcatenation : false
				},
				moz : {
					starlessGenerator : false,
					parenthesizedComprehensionBlock : false
				},
				sourceMap : null,
				sourceMapRoot : null,
				sourceMapWithCode : false,
				directive : false,
				verbatim : null
			};
		}

		function stringToArray(str) {
			var length = str.length,
			result = [],
			i;
			for (i = 0; i < length; i += 1) {
				result[i] = str.charAt(i);
			}
			return result;
		}
		
		

		function stringRepeat(str, num) {
			var result = '';

			for (num |= 0; num > 0; num >>>= 1, str += str) {
				if (num & 1) {
					result += str;
				}
			}

			return result;
		}

		isArray = Array.isArray;
		if (!isArray) {
			isArray = function isArray(array) {
				return Object.prototype.toString.call(array) === '[object Array]';
			};
		}

		// Fallback for the non SourceMap environment
		function SourceNodeMock(line, column, filename, chunk) {
			var result = [];

			function flatten(input) {
				var i,
				iz;
				if (isArray(input)) {
					for (i = 0, iz = input.length; i < iz; ++i) {
						flatten(input[i]);
					}
				} else if (input instanceof SourceNodeMock) {
					result.push(input);
				} else if (typeof input === 'string' && input) {
					result.push(input);
				}
			}

			flatten(chunk);
			this.children = result;
		}

		SourceNodeMock.prototype.toString = function toString() {
			var res = '',
			i,
			iz,
			node;
			for (i = 0, iz = this.children.length; i < iz; ++i) {
				node = this.children[i];
				if (node instanceof SourceNodeMock) {
					res += node.toString();
				} else {
					res += node;
				}
			}
			return res;
		};

		SourceNodeMock.prototype.replaceRight = function replaceRight(pattern, replacement) {
			var last = this.children[this.children.length - 1];
			if (last instanceof SourceNodeMock) {
				last.replaceRight(pattern, replacement);
			} else if (typeof last === 'string') {
				this.children[this.children.length - 1] = last.replace(pattern, replacement);
			} else {
				this.children.push(''.replace(pattern, replacement));
			}
			return this;
		};

		SourceNodeMock.prototype.join = function join(sep) {
			var i,
			iz,
			result;
			result = [];
			iz = this.children.length;
			if (iz > 0) {
				for (i = 0, iz -= 1; i < iz; ++i) {
					result.push(this.children[i], sep);
				}
				result.push(this.children[iz]);
				this.children = result;
			}
			return this;
		};

		function hasLineTerminator(str) {
			return (/[\r\n]/g).test(str);
		}

		function endsWithLineTerminator(str) {
			var ch = str.charAt(str.length - 1);
			return ch && isLineTerminator(ch);
		}

		function updateDeeply(target, override) {
			var key,
			val;

			function isHashObject(target) {
				return typeof target === 'object' && target instanceof Object && !(target instanceof RegExp);
			}

			for (key in override) {
				if (override.hasOwnProperty(key)) {
					val = override[key];
					if (isHashObject(val)) {
						if (isHashObject(target[key])) {
							updateDeeply(target[key], val);
						} else {
							target[key] = updateDeeply({}, val);
						}
					} else {
						target[key] = val;
					}
				}
			}
			return target;
		}

		function generateNumber(value) {
			var result,
			point,
			temp,
			exponent,
			pos;

			if (value !== value) {
				throw new Error('Numeric literal whose value is NaN');
			}
			if (value < 0 || (value === 0 && 1 / value < 0)) {
				throw new Error('Numeric literal whose value is negative');
			}

			if (value === 1 / 0) {
				return json ? 'null' : renumber ? '1e400' : '1e+400';
			}

			result = '' + value;
			if (!renumber || result.length < 3) {
				return result;
			}

			point = result.indexOf('.');
			if (!json && result.charAt(0) === '0' && point === 1) {
				point = 0;
				result = result.slice(1);
			}
			temp = result;
			result = result.replace('e+', 'e');
			exponent = 0;
			if ((pos = temp.indexOf('e')) > 0) {
				exponent = +temp.slice(pos + 1);
				temp = temp.slice(0, pos);
			}
			if (point >= 0) {
				exponent -= temp.length - point - 1;
				temp =  + (temp.slice(0, point) + temp.slice(point + 1)) + '';
			}
			pos = 0;
			while (temp.charAt(temp.length + pos - 1) === '0') {
				pos -= 1;
			}
			if (pos !== 0) {
				exponent -= pos;
				temp = temp.slice(0, pos);
			}
			if (exponent !== 0) {
				temp += 'e' + exponent;
			}
			if ((temp.length < result.length ||
					(hexadecimal && value > 1e12 && Math.floor(value) === value && (temp = '0x' + value.toString(16)).length < result.length)) &&
				+temp === value) {
				result = temp;
			}

			return result;
		}

		// Generate valid RegExp expression.
		// This function is based on https://github.com/Constellation/iv Engine

		function escapeRegExpCharacter(ch, previousIsBackslash) {
			// not handling '\' and handling \u2028 or \u2029 to unicode escape sequence
			if ((ch & ~1) === 0x2028) {
				return (previousIsBackslash ? 'u' : '\\u') + ((ch === 0x2028) ? '2028' : '2029');
			} else if (ch === 10 || ch === 13) { // \n, \r
				return (previousIsBackslash ? '' : '\\') + ((ch === 10) ? 'n' : 'r');
			}
			return String.fromCharCode(ch);
		}

		function generateRegExp(reg) {
			var match,
			result,
			flags,
			i,
			iz,
			ch,
			characterInBrack,
			previousIsBackslash;

			result = reg.toString();

			if (reg.source) {
				// extract flag from toString result
				match = result.match(/\/([^/] * )$ / );
				if (!match) {
					return result;
				}

				flags = match[1];
				result = '';

				characterInBrack = false;
				previousIsBackslash = false;
				for (i = 0, iz = reg.source.length; i < iz; ++i) {
					ch = reg.source.charCodeAt(i);

					if (!previousIsBackslash) {
						if (characterInBrack) {
							if (ch === 93) { // ]
								characterInBrack = false;
							}
						} else {
							if (ch === 47) { // /
								result += '\\';
							} else if (ch === 91) { // [
								characterInBrack = true;
							}
						}
						result += escapeRegExpCharacter(ch, previousIsBackslash);
						previousIsBackslash = ch === 92; // \
					} else {
						// if new RegExp("\\\n') is provided, create /\n/
						result += escapeRegExpCharacter(ch, previousIsBackslash);
						// prevent like /\\[/]/
						previousIsBackslash = false;
					}
				}

				return '/' + result + '/' + flags;
			}

			return result;
		}

		function escapeAllowedCharacter(ch, next) {
			var code = ch.charCodeAt(0),
			hex = code.toString(16),
			result = '\\';

			switch (ch) {
			case '\b':
				result += 'b';
				break;
			case '\f':
				result += 'f';
				break;
			case '\t':
				result += 't';
				break;
			default:
				if (json || code > 0xff) {
					result += 'u' + '0000'.slice(hex.length) + hex;
				} else if (ch === '\u0000' && '0123456789'.indexOf(next) < 0) {
					result += '0';
				} else if (ch === '\x0B') { // '\v'
					result += 'x0B';
				} else {
					result += 'x' + '00'.slice(hex.length) + hex;
				}
				break;
			}

			return result;
		}

		function escapeDisallowedCharacter(ch) {
			var result = '\\';
			switch (ch) {
			case '\\':
				result += '\\';
				break;
			case '\n':
				result += 'n';
				break;
			case '\r':
				result += 'r';
				break;
			case '\u2028':
				result += 'u2028';
				break;
			case '\u2029':
				result += 'u2029';
				break;
			default:
				throw new Error('Incorrectly classified character');
			}

			return result;
		}

		function escapeDirective(str) {
			var i,
			iz,
			ch,
			buf,
			quote;

			buf = str;
			if (typeof buf[0] === 'undefined') {
				buf = stringToArray(buf);
			}

			quote = quotes === 'double' ? '"' : '\'';
			for (i = 0, iz = buf.length; i < iz; i += 1) {
				ch = buf[i];
				if (ch === '\'') {
					quote = '"';
					break;
				} else if (ch === '"') {
					quote = '\'';
					break;
				} else if (ch === '\\') {
					i += 1;
				}
			}

			return quote + str + quote;
		}

		function escapeString(str) {
			var result = '',
			i,
			len,
			ch,
			singleQuotes = 0,
			doubleQuotes = 0,
			single;

			if (typeof str[0] === 'undefined') {
				str = stringToArray(str);
			}

			for (i = 0, len = str.length; i < len; i += 1) {
				ch = str[i];
				if (ch === '\'') {
					singleQuotes += 1;
				} else if (ch === '"') {
					doubleQuotes += 1;
				} else if (ch === '/' && json) {
					result += '\\';
				} else if ('\\\n\r\u2028\u2029'.indexOf(ch) >= 0) {
					result += escapeDisallowedCharacter(ch);
					continue;
				} else if ((json && ch < ' ') || !(json || escapeless || (ch >= ' ' && ch <= '~'))) {
					result += escapeAllowedCharacter(ch, str[i + 1]);
					continue;
				}
				result += ch;
			}

			single = !(quotes === 'double' || (quotes === 'auto' && doubleQuotes < singleQuotes));
			str = result;
			result = single ? '\'' : '"';

			if (typeof str[0] === 'undefined') {
				str = stringToArray(str);
			}

			for (i = 0, len = str.length; i < len; i += 1) {
				ch = str[i];
				if ((ch === '\'' && single) || (ch === '"' && !single)) {
					result += '\\';
				}
				result += ch;
			}

			return result + (single ? '\'' : '"');
		}

		function isWhiteSpace(ch) {
			// Use `\x0B` instead of `\v` for IE < 9 compatibility
			return '\t\x0B\f \xa0'.indexOf(ch) >= 0 || (ch.charCodeAt(0) >= 0x1680 && '\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\ufeff'.indexOf(ch) >= 0);
		}

		function isLineTerminator(ch) {
			return '\n\r\u2028\u2029'.indexOf(ch) >= 0;
		}

		function isIdentifierPart(ch) {
			return (ch === '$') || (ch === '_') || (ch === '\\') ||
			(ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') ||
			((ch >= '0') && (ch <= '9')) ||
			((ch.charCodeAt(0) >= 0x80) && Regex.NonAsciiIdentifierPart.test(ch));
		}

		// takes char code
		function isDecimalDigit(ch) {
			return (ch >= 48 && ch <= 57); // 0..9
		}

		function toSourceNode(generated, node) {
			if (node == null) {
				if (generated instanceof SourceNode) {
					return generated;
				} else {
					node = {};
				}
			}
			if (node.loc == null) {
				return new SourceNode(null, null, sourceMap, generated, node.name || null);
			}
			return new SourceNode(node.loc.start.line, node.loc.start.column, (sourceMap === true ? node.loc.source || null : sourceMap), generated, node.name || null);
		}

		function noEmptySpace() {
			return (space) ? space : ' ';
		}

		function join(left, right) {
			var leftSource = toSourceNode(left).toString(),
			rightSource = toSourceNode(right).toString(),
			leftChar = leftSource.charAt(leftSource.length - 1),
			rightChar = rightSource.charAt(0);

			if ((leftChar === '+' || leftChar === '-') && leftChar === rightChar ||
				isIdentifierPart(leftChar) && isIdentifierPart(rightChar) ||
				leftChar === '/' && rightChar === 'i') { // infix word operators all start with `i`
				return [left, noEmptySpace(), right];
			} else if (isWhiteSpace(leftChar) || isLineTerminator(leftChar) || isWhiteSpace(rightChar) || isLineTerminator(rightChar)) {
				return [left, right];
			}
			return [left, space, right];
		}

		function addIndent(stmt) {
			return [base, stmt];
		}

		function withIndent(fn) {
			var previousBase,
			result;
			previousBase = base;
			base += indent;
			result = fn.call(this, base);
			base = previousBase;
			return result;
		}

		function calculateSpaces(str) {
			var i;
			for (i = str.length - 1; i >= 0; i -= 1) {
				if (isLineTerminator(str.charAt(i))) {
					break;
				}
			}
			return (str.length - 1) - i;
		}

		function adjustMultilineComment(value, specialBase) {
			var array,
			i,
			len,
			line,
			j,
			spaces,
			previousBase;

			array = value.split(/\r\n|[\r\n]/);
			spaces = Number.MAX_VALUE;

			// first line doesn't have indentation
			for (i = 1, len = array.length; i < len; i += 1) {
				line = array[i];
				j = 0;
				while (j < line.length && isWhiteSpace(line[j])) {
					j += 1;
				}
				if (spaces > j) {
					spaces = j;
				}
			}

			if (typeof specialBase !== 'undefined') {
				// pattern like
				// {
				//   var t = 20;  /*
				//                 * this is comment
				//                 */
				// }
				previousBase = base;
				if (array[1][spaces] === '*') {
					specialBase += ' ';
				}
				base = specialBase;
			} else {
				if (spaces & 1) {
					// /*
					//  *
					//  */
					// If spaces are odd number, above pattern is considered.
					// We waste 1 space.
					spaces -= 1;
				}
				previousBase = base;
			}

			for (i = 1, len = array.length; i < len; i += 1) {
				array[i] = toSourceNode(addIndent(array[i].slice(spaces))).join('');
			}

			base = previousBase;

			return array.join('\n');
		}

		function generateComment(comment, specialBase) {
			if (comment.type === 'Line') {
				if (endsWithLineTerminator(comment.value)) {
					return '//' + comment.value;
				} else {
					// Always use LineTerminator
					return '//' + comment.value + '\n';
				}
			}
			if (extra.format.indent.adjustMultilineComment && /[\n\r]/.test(comment.value)) {
				return adjustMultilineComment('/*' + comment.value + '*/', specialBase);
			}
			return '/*' + comment.value + '*/';
		}

		function addCommentsToStatement(stmt, result) {
			var i,
			len,
			comment,
			save,
			tailingToStatement,
			specialBase,
			fragment;

			if (stmt.leadingComments && stmt.leadingComments.length > 0) {
				save = result;

				comment = stmt.leadingComments[0];
				result = [];
				if (safeConcatenation && stmt.type === Syntax.Program && stmt.body.length === 0) {
					result.push('\n');
				}
				result.push(generateComment(comment));
				if (!endsWithLineTerminator(toSourceNode(result).toString())) {
					result.push('\n');
				}

				for (i = 1, len = stmt.leadingComments.length; i < len; i += 1) {
					comment = stmt.leadingComments[i];
					fragment = [generateComment(comment)];
					if (!endsWithLineTerminator(toSourceNode(fragment).toString())) {
						fragment.push('\n');
					}
					result.push(addIndent(fragment));
				}

				result.push(addIndent(save));
			}

			if (stmt.trailingComments) {
				tailingToStatement = !endsWithLineTerminator(toSourceNode(result).toString());
				specialBase = stringRepeat(' ', calculateSpaces(toSourceNode([base, result, indent]).toString()));
				for (i = 0, len = stmt.trailingComments.length; i < len; i += 1) {
					comment = stmt.trailingComments[i];
					if (tailingToStatement) {
						// We assume target like following script
						//
						// var t = 20;  /**
						//               * This is comment of t
						//               */
						if (i === 0) {
							// first case
							result = [result, indent];
						} else {
							result = [result, specialBase];
						}
						result.push(generateComment(comment, specialBase));
					} else {
						result = [result, addIndent(generateComment(comment))];
					}
					if (i !== len - 1 && !endsWithLineTerminator(toSourceNode(result).toString())) {
						result = [result, '\n'];
					}
				}
			}

			return result;
		}

		function parenthesize(text, current, should) {
			if (current < should) {
				return ['(', text, ')'];
			}
			return text;
		}

		function maybeBlock(stmt, semicolonOptional, functionBody) {
			var result,
			noLeadingComment;

			noLeadingComment = !extra.comment || !stmt.leadingComments;

			if (stmt.type === Syntax.BlockStatement && noLeadingComment) {
				return [space, generateStatement(stmt, {
						functionBody : functionBody
					})];
			}

			if (stmt.type === Syntax.EmptyStatement && noLeadingComment) {
				return ';';
			}

			withIndent(function () {
				result = [newline, addIndent(generateStatement(stmt, {
							semicolonOptional : semicolonOptional,
							functionBody : functionBody
						}))];
			});

			return result;
		}

		function maybeBlockSuffix(stmt, result) {
			var ends = endsWithLineTerminator(toSourceNode(result).toString());
			if (stmt.type === Syntax.BlockStatement && (!extra.comment || !stmt.leadingComments) && !ends) {
				return [result, space];
			}
			if (ends) {
				return [result, base];
			}
			return [result, newline, base];
		}

		function generateVerbatim(expr, option) {
			var i,
			result;
			result = expr[extra.verbatim].split(/\r\n|\n/);
			for (i = 1; i < result.length; i++) {
				result[i] = newline + base + result[i];
			}

			result = parenthesize(result, Precedence.Sequence, option.precedence);
			return toSourceNode(result, expr);
		}

		function generateIdentifier(node) {
			return toSourceNode(node.name, node);
		}

		function generateFunctionBody(node) {
			var result,
			i,
			len,
			expr,
			arrow;

			arrow = node.type === Syntax.ArrowFunctionExpression;

			if (arrow && node.params.length === 1 && node.params[0].type === Syntax.Identifier) {
				// arg => { } case
				result = [generateIdentifier(node.params[0])];
			} else {
				result = ['('];
				for (i = 0, len = node.params.length; i < len; i += 1) {
					result.push(generateIdentifier(node.params[i]));
					if (i + 1 < len) {
						result.push(',' + space);
					}
				}
				result.push(')');
			}

			if (arrow) {
				result.push(space, '=>');
			}

			if (node.expression) {
				result.push(space);
				expr = generateExpression(node.body, {
						precedence : Precedence.Assignment,
						allowIn : true,
						allowCall : true
					});
				if (expr.toString().charAt(0) === '{') {
					expr = ['(', expr, ')'];
				}
				result.push(expr);
			} else {
				result.push(maybeBlock(node.body, false, true));
			}
			return result;
		}

		function generateExpression(expr, option) {
			var result,
			precedence,
			type,
			currentPrecedence,
			i,
			len,
			raw,
			fragment,
			multiline,
			leftChar,
			leftSource,
			rightChar,
			allowIn,
			allowCall,
			allowUnparenthesizedNew,
			property;

			precedence = option.precedence;
			allowIn = option.allowIn;
			allowCall = option.allowCall;
			type = expr.type || option.type;

			if (extra.verbatim && expr.hasOwnProperty(extra.verbatim)) {
				return generateVerbatim(expr, option);
			}

			switch (type) {
			case Syntax.SequenceExpression:
				result = [];
				allowIn |= (Precedence.Sequence < precedence);
				for (i = 0, len = expr.expressions.length; i < len; i += 1) {
					result.push(generateExpression(expr.expressions[i], {
							precedence : Precedence.Assignment,
							allowIn : allowIn,
							allowCall : true
						}));
					if (i + 1 < len) {
						result.push(',' + space);
					}
				}
				result = parenthesize(result, Precedence.Sequence, precedence);
				break;

			case Syntax.AssignmentExpression:
				allowIn |= (Precedence.Assignment < precedence);
				result = parenthesize(
						[
							generateExpression(expr.left, {
								precedence : Precedence.Call,
								allowIn : allowIn,
								allowCall : true
							}),
							space + expr.operator + space,
							generateExpression(expr.right, {
								precedence : Precedence.Assignment,
								allowIn : allowIn,
								allowCall : true
							})
						],
						Precedence.Assignment,
						precedence);
				break;

			case Syntax.ArrowFunctionExpression:
				allowIn |= (Precedence.ArrowFunction < precedence);
				result = parenthesize(generateFunctionBody(expr), Precedence.ArrowFunction, precedence);
				break;

			case Syntax.ConditionalExpression:
				allowIn |= (Precedence.Conditional < precedence);
				result = parenthesize(
						[
							generateExpression(expr.test, {
								precedence : Precedence.LogicalOR,
								allowIn : allowIn,
								allowCall : true
							}),
							space + '?' + space,
							generateExpression(expr.consequent, {
								precedence : Precedence.Assignment,
								allowIn : allowIn,
								allowCall : true
							}),
							space + ':' + space,
							generateExpression(expr.alternate, {
								precedence : Precedence.Assignment,
								allowIn : allowIn,
								allowCall : true
							})
						],
						Precedence.Conditional,
						precedence);
				break;

			case Syntax.LogicalExpression:
			case Syntax.BinaryExpression:
				currentPrecedence = BinaryPrecedence[expr.operator];

				allowIn |= (currentPrecedence < precedence);

				fragment = generateExpression(expr.left, {
						precedence : currentPrecedence,
						allowIn : allowIn,
						allowCall : true
					});

				leftSource = fragment.toString();

				if (leftSource.charAt(leftSource.length - 1) === '/' && isIdentifierPart(expr.operator.charAt(0))) {
					result = [fragment, noEmptySpace(), expr.operator];
				} else {
					result = join(fragment, expr.operator);
				}

				fragment = generateExpression(expr.right, {
						precedence : currentPrecedence + 1,
						allowIn : allowIn,
						allowCall : true
					});

				if (expr.operator === '/' && fragment.toString().charAt(0) === '/' ||
					expr.operator.slice(-1) === '<' && fragment.toString().slice(0, 3) === '!--') {
					// If '/' concats with '/' or `<` concats with `!--`, it is interpreted as comment start
					result.push(noEmptySpace(), fragment);
				} else {
					result = join(result, fragment);
				}

				if (expr.operator === 'in' && !allowIn) {
					result = ['(', result, ')'];
				} else {
					result = parenthesize(result, currentPrecedence, precedence);
				}

				break;

			case Syntax.CallExpression:
				result = [generateExpression(expr.callee, {
						precedence : Precedence.Call,
						allowIn : true,
						allowCall : true,
						allowUnparenthesizedNew : false
					})];

				result.push('(');
				for (i = 0, len = expr['arguments'].length; i < len; i += 1) {
					result.push(generateExpression(expr['arguments'][i], {
							precedence : Precedence.Assignment,
							allowIn : true,
							allowCall : true
						}));
					if (i + 1 < len) {
						result.push(',' + space);
					}
				}
				result.push(')');

				if (!allowCall) {
					result = ['(', result, ')'];
				} else {
					result = parenthesize(result, Precedence.Call, precedence);
				}
				break;

			case Syntax.NewExpression:
				len = expr['arguments'].length;
				allowUnparenthesizedNew = option.allowUnparenthesizedNew === undefined || option.allowUnparenthesizedNew;

				result = join(
						'new',
						generateExpression(expr.callee, {
							precedence : Precedence.New,
							allowIn : true,
							allowCall : false,
							allowUnparenthesizedNew : allowUnparenthesizedNew && !parentheses && len === 0
						}));

				if (!allowUnparenthesizedNew || parentheses || len > 0) {
					result.push('(');
					for (i = 0; i < len; i += 1) {
						result.push(generateExpression(expr['arguments'][i], {
								precedence : Precedence.Assignment,
								allowIn : true,
								allowCall : true
							}));
						if (i + 1 < len) {
							result.push(',' + space);
						}
					}
					result.push(')');
				}

				result = parenthesize(result, Precedence.New, precedence);
				break;

			case Syntax.MemberExpression:
				result = [generateExpression(expr.object, {
						precedence : Precedence.Call,
						allowIn : true,
						allowCall : allowCall,
						allowUnparenthesizedNew : false
					})];

				if (expr.computed) {
					result.push('[', generateExpression(expr.property, {
							precedence : Precedence.Sequence,
							allowIn : true,
							allowCall : allowCall
						}), ']');
				} else {
					if (expr.object.type === Syntax.Literal && typeof expr.object.value === 'number') {
						fragment = toSourceNode(result).toString();
						// When the following conditions are all true,
						//   1. No floating point
						//   2. Don't have exponents
						//   3. The last character is a decimal digit
						//   4. Not hexadecimal OR octal number literal
						// we should add a floating point.
						if (
							fragment.indexOf('.') < 0 &&
							!/[eExX]/.test(fragment) &&
							isDecimalDigit(fragment.charCodeAt(fragment.length - 1)) &&
							!(fragment.length >= 2 && fragment.charCodeAt(0) === 48) // '0'
						) {
							result.push('.');
						}
					}
					result.push('.', generateIdentifier(expr.property));
				}

				result = parenthesize(result, Precedence.Member, precedence);
				break;

			case Syntax.UnaryExpression:
				fragment = generateExpression(expr.argument, {
						precedence : Precedence.Unary,
						allowIn : true,
						allowCall : true
					});

				if (space === '') {
					result = join(expr.operator, fragment);
				} else {
					result = [expr.operator];
					if (expr.operator.length > 2) {
						// delete, void, typeof
						// get `typeof []`, not `typeof[]`
						result = join(result, fragment);
					} else {
						// Prevent inserting spaces between operator and argument if it is unnecessary
						// like, `!cond`
						leftSource = toSourceNode(result).toString();
						leftChar = leftSource.charAt(leftSource.length - 1);
						rightChar = fragment.toString().charAt(0);

						if (((leftChar === '+' || leftChar === '-') && leftChar === rightChar) || (isIdentifierPart(leftChar) && isIdentifierPart(rightChar))) {
							result.push(noEmptySpace(), fragment);
						} else {
							result.push(fragment);
						}
					}
				}
				result = parenthesize(result, Precedence.Unary, precedence);
				break;

			case Syntax.YieldExpression:
				if (expr.delegate) {
					result = 'yield*';
				} else {
					result = 'yield';
				}
				if (expr.argument) {
					result = join(
							result,
							generateExpression(expr.argument, {
								precedence : Precedence.Assignment,
								allowIn : true,
								allowCall : true
							}));
				}
				break;

			case Syntax.UpdateExpression:
				if (expr.prefix) {
					result = parenthesize(
							[
								expr.operator,
								generateExpression(expr.argument, {
									precedence : Precedence.Unary,
									allowIn : true,
									allowCall : true
								})
							],
							Precedence.Unary,
							precedence);
				} else {
					result = parenthesize(
							[
								generateExpression(expr.argument, {
									precedence : Precedence.Postfix,
									allowIn : true,
									allowCall : true
								}),
								expr.operator
							],
							Precedence.Postfix,
							precedence);
				}
				break;

			case Syntax.FunctionExpression:
				result = 'function';

				if (expr.id) {
					result = [result, noEmptySpace(),
						generateIdentifier(expr.id),
						generateFunctionBody(expr)];
				} else {
					result = [result + space, generateFunctionBody(expr)];
				}

				break;

			case Syntax.ArrayPattern:
			case Syntax.ArrayExpression:
				if (!expr.elements.length) {
					result = '[]';
					break;
				}
				multiline = expr.elements.length > 1;
				result = ['[', multiline ? newline : ''];
				withIndent(function (indent) {
					for (i = 0, len = expr.elements.length; i < len; i += 1) {
						if (!expr.elements[i]) {
							if (multiline) {
								result.push(indent);
							}
							if (i + 1 === len) {
								result.push(',');
							}
						} else {
							result.push(multiline ? indent : '', generateExpression(expr.elements[i], {
									precedence : Precedence.Assignment,
									allowIn : true,
									allowCall : true
								}));
						}
						if (i + 1 < len) {
							result.push(',' + (multiline ? newline : space));
						}
					}
				});
				if (multiline && !endsWithLineTerminator(toSourceNode(result).toString())) {
					result.push(newline);
				}
				result.push(multiline ? base : '', ']');
				break;

			case Syntax.Property:
				if (expr.kind === 'get' || expr.kind === 'set') {
					result = [
						expr.kind, noEmptySpace(),
						generateExpression(expr.key, {
							precedence : Precedence.Sequence,
							allowIn : true,
							allowCall : true
						}),
						generateFunctionBody(expr.value)
					];
				} else {
					if (expr.shorthand) {
						result = generateExpression(expr.key, {
								precedence : Precedence.Sequence,
								allowIn : true,
								allowCall : true
							});
					} else if (expr.method) {
						result = [];
						if (expr.value.generator) {
							result.push('*');
						}
						result.push(generateExpression(expr.key, {
								precedence : Precedence.Sequence,
								allowIn : true,
								allowCall : true
							}), generateFunctionBody(expr.value));
					} else {
						result = [
							generateExpression(expr.key, {
								precedence : Precedence.Sequence,
								allowIn : true,
								allowCall : true
							}),
							':' + space,
							generateExpression(expr.value, {
								precedence : Precedence.Assignment,
								allowIn : true,
								allowCall : true
							})
						];
					}
				}
				break;

			case Syntax.ObjectExpression:
				if (!expr.properties.length) {
					result = '{}';
					break;
				}
				multiline = expr.properties.length > 1;

				withIndent(function () {
					fragment = generateExpression(expr.properties[0], {
							precedence : Precedence.Sequence,
							allowIn : true,
							allowCall : true,
							type : Syntax.Property
						});
				});

				if (!multiline) {
					// issues 4
					// Do not transform from
					//   dejavu.Class.declare({
					//       method2: function () {}
					//   });
					// to
					//   dejavu.Class.declare({method2: function () {
					//       }});
					if (!hasLineTerminator(toSourceNode(fragment).toString())) {
						result = ['{', space, fragment, space, '}'];
						break;
					}
				}

				withIndent(function (indent) {
					result = ['{', newline, indent, fragment];

					if (multiline) {
						result.push(',' + newline);
						for (i = 1, len = expr.properties.length; i < len; i += 1) {
							result.push(indent, generateExpression(expr.properties[i], {
									precedence : Precedence.Sequence,
									allowIn : true,
									allowCall : true,
									type : Syntax.Property
								}));
							if (i + 1 < len) {
								result.push(',' + newline);
							}
						}
					}
				});

				if (!endsWithLineTerminator(toSourceNode(result).toString())) {
					result.push(newline);
				}
				result.push(base, '}');
				break;

			case Syntax.ObjectPattern:
				if (!expr.properties.length) {
					result = '{}';
					break;
				}

				multiline = false;
				if (expr.properties.length === 1) {
					property = expr.properties[0];
					if (property.value.type !== Syntax.Identifier) {
						multiline = true;
					}
				} else {
					for (i = 0, len = expr.properties.length; i < len; i += 1) {
						property = expr.properties[i];
						if (!property.shorthand) {
							multiline = true;
							break;
						}
					}
				}
				result = ['{', multiline ? newline : ''];

				withIndent(function (indent) {
					for (i = 0, len = expr.properties.length; i < len; i += 1) {
						result.push(multiline ? indent : '', generateExpression(expr.properties[i], {
								precedence : Precedence.Sequence,
								allowIn : true,
								allowCall : true
							}));
						if (i + 1 < len) {
							result.push(',' + (multiline ? newline : space));
						}
					}
				});

				if (multiline && !endsWithLineTerminator(toSourceNode(result).toString())) {
					result.push(newline);
				}
				result.push(multiline ? base : '', '}');
				break;

			case Syntax.ThisExpression:
				result = 'this';
				break;

			case Syntax.Identifier:
				result = generateIdentifier(expr);
				break;

			case Syntax.Literal:
				if (expr.hasOwnProperty('raw') && parse) {
					try {
						raw = parse(expr.raw).body[0].expression;
						if (raw.type === Syntax.Literal) {
							if (raw.value === expr.value) {
								result = expr.raw;
								break;
							}
						}
					} catch (e) {
						// not use raw property
					}
				}

				if (expr.value === null) {
					result = 'null';
					break;
				}

				if (typeof expr.value === 'string') {
					result = escapeString(expr.value);
					break;
				}

				if (typeof expr.value === 'number') {
					result = generateNumber(expr.value);
					break;
				}

				if (typeof expr.value === 'boolean') {
					result = expr.value ? 'true' : 'false';
					break;
				}

				result = generateRegExp(expr.value);
				break;

			case Syntax.ComprehensionExpression:
				result = [
					'[',
					generateExpression(expr.body, {
						precedence : Precedence.Assignment,
						allowIn : true,
						allowCall : true
					})
				];

				if (expr.blocks) {
					for (i = 0, len = expr.blocks.length; i < len; i += 1) {
						fragment = generateExpression(expr.blocks[i], {
								precedence : Precedence.Sequence,
								allowIn : true,
								allowCall : true
							});
						result = join(result, fragment);
					}
				}

				if (expr.filter) {
					result = join(result, 'if' + space);
					fragment = generateExpression(expr.filter, {
							precedence : Precedence.Sequence,
							allowIn : true,
							allowCall : true
						});
					if (extra.moz.parenthesizedComprehensionBlock) {
						result = join(result, ['(', fragment, ')']);
					} else {
						result = join(result, fragment);
					}
				}
				result.push(']');
				break;

			case Syntax.ComprehensionBlock:
				if (expr.left.type === Syntax.VariableDeclaration) {
					fragment = [
						expr.left.kind, noEmptySpace(),
						generateStatement(expr.left.declarations[0], {
							allowIn : false
						})
					];
				} else {
					fragment = generateExpression(expr.left, {
							precedence : Precedence.Call,
							allowIn : true,
							allowCall : true
						});
				}

				fragment = join(fragment, expr.of ? 'of' : 'in');
				fragment = join(fragment, generateExpression(expr.right, {
							precedence : Precedence.Sequence,
							allowIn : true,
							allowCall : true
						}));

				if (extra.moz.parenthesizedComprehensionBlock) {
					result = ['for' + space + '(', fragment, ')'];
				} else {
					result = join('for' + space, fragment);
				}
				break;

			default:
				throw new Error('Unknown expression type: ' + expr.type);
			}

			return toSourceNode(result, expr);
		}

		function generateStatement(stmt, option) {
			var i,
			len,
			result,
			node,
			allowIn,
			functionBody,
			directiveContext,
			fragment,
			semicolon;

			allowIn = true;
			semicolon = ';';
			functionBody = false;
			directiveContext = false;
			if (option) {
				allowIn = option.allowIn === undefined || option.allowIn;
				if (!semicolons && option.semicolonOptional === true) {
					semicolon = '';
				}
				functionBody = option.functionBody;
				directiveContext = option.directiveContext;
			}

			switch (stmt.type) {
			case Syntax.BlockStatement:
				result = ['{', newline];

				withIndent(function () {
					for (i = 0, len = stmt.body.length; i < len; i += 1) {
						fragment = addIndent(generateStatement(stmt.body[i], {
									semicolonOptional : i === len - 1,
									directiveContext : functionBody
								}));
						result.push(fragment);
						if (!endsWithLineTerminator(toSourceNode(fragment).toString())) {
							result.push(newline);
						}
					}
				});

				result.push(addIndent('}'));
				break;

			case Syntax.BreakStatement:
				if (stmt.label) {
					result = 'break ' + stmt.label.name + semicolon;
				} else {
					result = 'break' + semicolon;
				}
				break;

			case Syntax.ContinueStatement:
				if (stmt.label) {
					result = 'continue ' + stmt.label.name + semicolon;
				} else {
					result = 'continue' + semicolon;
				}
				break;

			case Syntax.DirectiveStatement:
				if (stmt.raw) {
					result = stmt.raw + semicolon;
				} else {
					result = escapeDirective(stmt.directive) + semicolon;
				}
				break;

			case Syntax.DoWhileStatement:
				// Because `do 42 while (cond)` is Syntax Error. We need semicolon.
				result = join('do', maybeBlock(stmt.body));
				result = maybeBlockSuffix(stmt.body, result);
				result = join(result, [
							'while' + space + '(',
							generateExpression(stmt.test, {
								precedence : Precedence.Sequence,
								allowIn : true,
								allowCall : true
							}),
							')' + semicolon
						]);
				break;

			case Syntax.CatchClause:
				withIndent(function () {
					result = [
						'catch' + space + '(',
						generateExpression(stmt.param, {
							precedence : Precedence.Sequence,
							allowIn : true,
							allowCall : true
						}),
						')'
					];
				});
				result.push(maybeBlock(stmt.body));
				break;

			case Syntax.DebuggerStatement:
				result = 'debugger' + semicolon;
				break;

			case Syntax.EmptyStatement:
				result = ';';
				break;

			case Syntax.ExpressionStatement:
				result = [generateExpression(stmt.expression, {
						precedence : Precedence.Sequence,
						allowIn : true,
						allowCall : true
					})];
				// 12.4 '{', 'function' is not allowed in this position.
				// wrap expression with parentheses
				fragment = toSourceNode(result).toString();
				if (fragment.charAt(0) === '{' || (fragment.slice(0, 8) === 'function' && ' ('.indexOf(fragment.charAt(8)) >= 0) || (directive && directiveContext && stmt.expression.type === Syntax.Literal && typeof stmt.expression.value === 'string')) {
					result = ['(', result, ')' + semicolon];
				} else {
					result.push(semicolon);
				}
				break;

			case Syntax.VariableDeclarator:
				if (stmt.init) {
					result = [
						generateExpression(stmt.id, {
							precedence : Precedence.Assignment,
							allowIn : allowIn,
							allowCall : true
						}),
						space,
						'=',
						space,
						generateExpression(stmt.init, {
							precedence : Precedence.Assignment,
							allowIn : allowIn,
							allowCall : true
						})
					];
				} else {
					result = generateIdentifier(stmt.id);
				}
				break;

			case Syntax.VariableDeclaration:
				result = [stmt.kind];
				// special path for
				// var x = function () {
				// };
				if (stmt.declarations.length === 1 && stmt.declarations[0].init &&
					stmt.declarations[0].init.type === Syntax.FunctionExpression) {
					result.push(noEmptySpace(), generateStatement(stmt.declarations[0], {
							allowIn : allowIn
						}));
				} else {
					// VariableDeclarator is typed as Statement,
					// but joined with comma (not LineTerminator).
					// So if comment is attached to target node, we should specialize.
					withIndent(function () {
						node = stmt.declarations[0];
						if (extra.comment && node.leadingComments) {
							result.push('\n', addIndent(generateStatement(node, {
										allowIn : allowIn
									})));
						} else {
							result.push(noEmptySpace(), generateStatement(node, {
									allowIn : allowIn
								}));
						}

						for (i = 1, len = stmt.declarations.length; i < len; i += 1) {
							node = stmt.declarations[i];
							if (extra.comment && node.leadingComments) {
								result.push(',' + newline, addIndent(generateStatement(node, {
											allowIn : allowIn
										})));
							} else {
								result.push(',' + space, generateStatement(node, {
										allowIn : allowIn
									}));
							}
						}
					});
				}
				result.push(semicolon);
				break;

			case Syntax.ThrowStatement:
				result = [join(
						'throw',
						generateExpression(stmt.argument, {
							precedence : Precedence.Sequence,
							allowIn : true,
							allowCall : true
						})), semicolon];
				break;

			case Syntax.TryStatement:
				result = ['try', maybeBlock(stmt.block)];
				result = maybeBlockSuffix(stmt.block, result);
				if (stmt.handlers) {
					// old interface
					for (i = 0, len = stmt.handlers.length; i < len; i += 1) {
						result = join(result, generateStatement(stmt.handlers[i]));
						if (stmt.finalizer || i + 1 !== len) {
							result = maybeBlockSuffix(stmt.handlers[i].body, result);
						}
					}
				} else {
					// new interface
					if (stmt.handler) {
						result = join(result, generateStatement(stmt.handler));
						if (stmt.finalizer || stmt.guardedHandlers.length > 0) {
							result = maybeBlockSuffix(stmt.handler.body, result);
						}
					}

					for (i = 0, len = stmt.guardedHandlers.length; i < len; i += 1) {
						result = join(result, generateStatement(stmt.guardedHandlers[i]));
						if (stmt.finalizer || i + 1 !== len) {
							result = maybeBlockSuffix(stmt.guardedHandlers[i].body, result);
						}
					}
				}
				if (stmt.finalizer) {
					result = join(result, ['finally', maybeBlock(stmt.finalizer)]);
				}
				break;

			case Syntax.SwitchStatement:
				withIndent(function () {
					result = [
						'switch' + space + '(',
						generateExpression(stmt.discriminant, {
							precedence : Precedence.Sequence,
							allowIn : true,
							allowCall : true
						}),
						')' + space + '{' + newline
					];
				});
				if (stmt.cases) {
					for (i = 0, len = stmt.cases.length; i < len; i += 1) {
						fragment = addIndent(generateStatement(stmt.cases[i], {
									semicolonOptional : i === len - 1
								}));
						result.push(fragment);
						if (!endsWithLineTerminator(toSourceNode(fragment).toString())) {
							result.push(newline);
						}
					}
				}
				result.push(addIndent('}'));
				break;

			case Syntax.SwitchCase:
				withIndent(function () {
					if (stmt.test) {
						result = [
							join('case', generateExpression(stmt.test, {
									precedence : Precedence.Sequence,
									allowIn : true,
									allowCall : true
								})),
							':'
						];
					} else {
						result = ['default:'];
					}

					i = 0;
					len = stmt.consequent.length;
					if (len && stmt.consequent[0].type === Syntax.BlockStatement) {
						fragment = maybeBlock(stmt.consequent[0]);
						result.push(fragment);
						i = 1;
					}

					if (i !== len && !endsWithLineTerminator(toSourceNode(result).toString())) {
						result.push(newline);
					}

					for (; i < len; i += 1) {
						fragment = addIndent(generateStatement(stmt.consequent[i], {
									semicolonOptional : i === len - 1 && semicolon === ''
								}));
						result.push(fragment);
						if (i + 1 !== len && !endsWithLineTerminator(toSourceNode(fragment).toString())) {
							result.push(newline);
						}
					}
				});
				break;

			case Syntax.IfStatement:
				withIndent(function () {
					result = [
						'if' + space + '(',
						generateExpression(stmt.test, {
							precedence : Precedence.Sequence,
							allowIn : true,
							allowCall : true
						}),
						')'
					];
				});
				if (stmt.alternate) {
					result.push(maybeBlock(stmt.consequent));
					result = maybeBlockSuffix(stmt.consequent, result);
					if (stmt.alternate.type === Syntax.IfStatement) {
						result = join(result, ['else ', generateStatement(stmt.alternate, {
										semicolonOptional : semicolon === ''
									})]);
					} else {
						result = join(result, join('else', maybeBlock(stmt.alternate, semicolon === '')));
					}
				} else {
					result.push(maybeBlock(stmt.consequent, semicolon === ''));
				}
				break;

			case Syntax.ForStatement:
				withIndent(function () {
					result = ['for' + space + '('];
					if (stmt.init) {
						if (stmt.init.type === Syntax.VariableDeclaration) {
							result.push(generateStatement(stmt.init, {
									allowIn : false
								}));
						} else {
							result.push(generateExpression(stmt.init, {
									precedence : Precedence.Sequence,
									allowIn : false,
									allowCall : true
								}), ';');
						}
					} else {
						result.push(';');
					}

					if (stmt.test) {
						result.push(space, generateExpression(stmt.test, {
								precedence : Precedence.Sequence,
								allowIn : true,
								allowCall : true
							}), ';');
					} else {
						result.push(';');
					}

					if (stmt.update) {
						result.push(space, generateExpression(stmt.update, {
								precedence : Precedence.Sequence,
								allowIn : true,
								allowCall : true
							}), ')');
					} else {
						result.push(')');
					}
				});

				result.push(maybeBlock(stmt.body, semicolon === ''));
				break;

			case Syntax.ForInStatement:
				result = ['for' + space + '('];
				withIndent(function () {
					if (stmt.left.type === Syntax.VariableDeclaration) {
						withIndent(function () {
							result.push(stmt.left.kind + noEmptySpace(), generateStatement(stmt.left.declarations[0], {
									allowIn : false
								}));
						});
					} else {
						result.push(generateExpression(stmt.left, {
								precedence : Precedence.Call,
								allowIn : true,
								allowCall : true
							}));
					}

					result = join(result, 'in');
					result = [join(
							result,
							generateExpression(stmt.right, {
								precedence : Precedence.Sequence,
								allowIn : true,
								allowCall : true
							})), ')'];
				});
				result.push(maybeBlock(stmt.body, semicolon === ''));
				break;

			case Syntax.LabeledStatement:
				result = [stmt.label.name + ':', maybeBlock(stmt.body, semicolon === '')];
				break;

			case Syntax.Program:
				len = stmt.body.length;
				result = [safeConcatenation && len > 0 ? '\n' : ''];
				for (i = 0; i < len; i += 1) {
					fragment = addIndent(
							generateStatement(stmt.body[i], {
								semicolonOptional : !safeConcatenation && i === len - 1,
								directiveContext : true
							}));
					result.push(fragment);
					if (i + 1 < len && !endsWithLineTerminator(toSourceNode(fragment).toString())) {
						result.push(newline);
					}
				}
				break;

			case Syntax.FunctionDeclaration:
				result = [(stmt.generator && !extra.moz.starlessGenerator ? 'function* ' : 'function '),
					generateIdentifier(stmt.id),
					generateFunctionBody(stmt)];
				break;

			case Syntax.ReturnStatement:
				if (stmt.argument) {
					result = [join(
							'return',
							generateExpression(stmt.argument, {
								precedence : Precedence.Sequence,
								allowIn : true,
								allowCall : true
							})), semicolon];
				} else {
					result = ['return' + semicolon];
				}
				break;

			case Syntax.WhileStatement:
				withIndent(function () {
					result = [
						'while' + space + '(',
						generateExpression(stmt.test, {
							precedence : Precedence.Sequence,
							allowIn : true,
							allowCall : true
						}),
						')'
					];
				});
				result.push(maybeBlock(stmt.body, semicolon === ''));
				break;

			case Syntax.WithStatement:
				withIndent(function () {
					result = [
						'with' + space + '(',
						generateExpression(stmt.object, {
							precedence : Precedence.Sequence,
							allowIn : true,
							allowCall : true
						}),
						')'
					];
				});
				result.push(maybeBlock(stmt.body, semicolon === ''));
				break;

			default:
				throw new Error('Unknown statement type: ' + stmt.type);
			}

			// Attach comments

			if (extra.comment) {
				result = addCommentsToStatement(stmt, result);
			}

			fragment = toSourceNode(result).toString();
			if (stmt.type === Syntax.Program && !safeConcatenation && newline === '' && fragment.charAt(fragment.length - 1) === '\n') {
				result = toSourceNode(result).replaceRight(/\s+$/, '');
			}

			return toSourceNode(result, stmt);
		}

		function generate(node, options) {
			var defaultOptions = getDefaultOptions(),
			result,
			pair;

			if (options != null) {
				// Obsolete options
				//
				//   `options.indent`
				//   `options.base`
				//
				// Instead of them, we can use `option.format.indent`.
				if (typeof options.indent === 'string') {
					defaultOptions.format.indent.style = options.indent;
				}
				if (typeof options.base === 'number') {
					defaultOptions.format.indent.base = options.base;
				}
				options = updateDeeply(defaultOptions, options);
				indent = options.format.indent.style;
				if (typeof options.base === 'string') {
					base = options.base;
				} else {
					base = stringRepeat(indent, options.format.indent.base);
				}
			} else {
				options = defaultOptions;
				indent = options.format.indent.style;
				base = stringRepeat(indent, options.format.indent.base);
			}
			json = options.format.json;
			renumber = options.format.renumber;
			hexadecimal = json ? false : options.format.hexadecimal;
			quotes = json ? 'double' : options.format.quotes;
			escapeless = options.format.escapeless;
			newline = options.format.newline;
			space = options.format.space;
			if (options.format.compact) {
				newline = space = indent = base = '';
			}
			parentheses = options.format.parentheses;
			semicolons = options.format.semicolons;
			safeConcatenation = options.format.safeConcatenation;
			directive = options.directive;
			parse = json ? null : options.parse;
			sourceMap = options.sourceMap;
			extra = options;

			if (sourceMap) {
				if (!exports.browser) {
					// We assume environment is node.js
					// And prevent from including source-map by browserify
					//SourceNode = require('../source-map/lib/source-map').SourceNode;
				} else {
					SourceNode = global.sourceMap.SourceNode;
				}
			} else {
				SourceNode = SourceNodeMock;
			}

			switch (node.type) {
			case Syntax.BlockStatement:
			case Syntax.BreakStatement:
			case Syntax.CatchClause:
			case Syntax.ContinueStatement:
			case Syntax.DirectiveStatement:
			case Syntax.DoWhileStatement:
			case Syntax.DebuggerStatement:
			case Syntax.EmptyStatement:
			case Syntax.ExpressionStatement:
			case Syntax.ForStatement:
			case Syntax.ForInStatement:
			case Syntax.FunctionDeclaration:
			case Syntax.IfStatement:
			case Syntax.LabeledStatement:
			case Syntax.Program:
			case Syntax.ReturnStatement:
			case Syntax.SwitchStatement:
			case Syntax.SwitchCase:
			case Syntax.ThrowStatement:
			case Syntax.TryStatement:
			case Syntax.VariableDeclaration:
			case Syntax.VariableDeclarator:
			case Syntax.WhileStatement:
			case Syntax.WithStatement:
				result = generateStatement(node);
				break;

			case Syntax.AssignmentExpression:
			case Syntax.ArrayExpression:
			case Syntax.ArrayPattern:
			case Syntax.BinaryExpression:
			case Syntax.CallExpression:
			case Syntax.ConditionalExpression:
			case Syntax.FunctionExpression:
			case Syntax.Identifier:
			case Syntax.Literal:
			case Syntax.LogicalExpression:
			case Syntax.MemberExpression:
			case Syntax.NewExpression:
			case Syntax.ObjectExpression:
			case Syntax.ObjectPattern:
			case Syntax.Property:
			case Syntax.SequenceExpression:
			case Syntax.ThisExpression:
			case Syntax.UnaryExpression:
			case Syntax.UpdateExpression:
			case Syntax.YieldExpression:

				result = generateExpression(node, {
						precedence : Precedence.Sequence,
						allowIn : true,
						allowCall : true
					});
				break;

			default:
				throw new Error('Unknown node type: ' + node.type);
			}

			if (!sourceMap) {
				return result.toString();
			}

			pair = result.toStringWithSourceMap({
					file : options.file,
					sourceRoot : options.sourceMapRoot
				});

			if (options.sourceMapWithCode) {
				return pair;
			}
			return pair.map.toString();
		}

		FORMAT_MINIFY = {
			indent : {
				style : '',
				base : 0
			},
			renumber : true,
			hexadecimal : true,
			quotes : 'auto',
			escapeless : true,
			compact : true,
			parentheses : false,
			semicolons : false
		};

		FORMAT_DEFAULTS = getDefaultOptions().format;

		exports.version = '0.0.28-dev';
		exports.generate = generate;
		exports.attachComments = estraverse.attachComments;
		exports.browser = false;
		exports.FORMAT_MINIFY = FORMAT_MINIFY;
		exports.FORMAT_DEFAULTS = FORMAT_DEFAULTS;
	}
		());

	//var escodegen = exports;

	exports = {};

	(function (root, factory) {
		'use strict';

		// Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,
		// Rhino, and plain browser loading.
		if (typeof define === 'function' && define.amd) {
			define(['exports'], factory);
		} else if (typeof exports !== 'undefined') {
			factory(exports);
		} else {
			factory((root.esprima = {}));
		}
	}
		(this, function (exports) {
			'use strict';

			var Token,
			TokenName,
			FnExprTokens,
			Syntax,
			PropertyKind,
			Messages,
			Regex,
			SyntaxTreeDelegate,
			source,
			strict,
			index,
			lineNumber,
			lineStart,
			length,
			delegate,
			lookahead,
			state,
			extra;

			Token = {
				BooleanLiteral : 1,
				EOF : 2,
				Identifier : 3,
				Keyword : 4,
				NullLiteral : 5,
				NumericLiteral : 6,
				Punctuator : 7,
				StringLiteral : 8,
				RegularExpression : 9
			};

			TokenName = {};
			TokenName[Token.BooleanLiteral] = 'Boolean';
			TokenName[Token.EOF] = '<end>';
			TokenName[Token.Identifier] = 'Identifier';
			TokenName[Token.Keyword] = 'Keyword';
			TokenName[Token.NullLiteral] = 'Null';
			TokenName[Token.NumericLiteral] = 'Numeric';
			TokenName[Token.Punctuator] = 'Punctuator';
			TokenName[Token.StringLiteral] = 'String';
			TokenName[Token.RegularExpression] = 'RegularExpression';

			// A function following one of those tokens is an expression.
			FnExprTokens = ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',
				'return', 'case', 'delete', 'throw', 'void',
				// assignment operators
				'=', '+=', '-=', '*=', '/=', '%=', '<<=', '>>=', '>>>=',
				'&=', '|=', '^=', ',',
				// binary/unary operators
				'+', '-', '*', '/', '%', '++', '--', '<<', '>>', '>>>', '&',
				'|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',
				'<=', '<', '>', '!=', '!=='];

			Syntax = {
				AssignmentExpression : 'AssignmentExpression',
				ArrayExpression : 'ArrayExpression',
				BlockStatement : 'BlockStatement',
				BinaryExpression : 'BinaryExpression',
				BreakStatement : 'BreakStatement',
				CallExpression : 'CallExpression',
				CatchClause : 'CatchClause',
				ConditionalExpression : 'ConditionalExpression',
				ContinueStatement : 'ContinueStatement',
				DoWhileStatement : 'DoWhileStatement',
				DebuggerStatement : 'DebuggerStatement',
				EmptyStatement : 'EmptyStatement',
				ExpressionStatement : 'ExpressionStatement',
				ForStatement : 'ForStatement',
				ForInStatement : 'ForInStatement',
				FunctionDeclaration : 'FunctionDeclaration',
				FunctionExpression : 'FunctionExpression',
				Identifier : 'Identifier',
				IfStatement : 'IfStatement',
				Literal : 'Literal',
				LabeledStatement : 'LabeledStatement',
				LogicalExpression : 'LogicalExpression',
				MemberExpression : 'MemberExpression',
				NewExpression : 'NewExpression',
				ObjectExpression : 'ObjectExpression',
				Program : 'Program',
				Property : 'Property',
				ReturnStatement : 'ReturnStatement',
				SequenceExpression : 'SequenceExpression',
				SwitchStatement : 'SwitchStatement',
				SwitchCase : 'SwitchCase',
				ThisExpression : 'ThisExpression',
				ThrowStatement : 'ThrowStatement',
				TryStatement : 'TryStatement',
				UnaryExpression : 'UnaryExpression',
				UpdateExpression : 'UpdateExpression',
				VariableDeclaration : 'VariableDeclaration',
				VariableDeclarator : 'VariableDeclarator',
				WhileStatement : 'WhileStatement',
				WithStatement : 'WithStatement'
			};

			PropertyKind = {
				Data : 1,
				Get : 2,
				Set : 4
			};

			// Error messages should be identical to V8.
			Messages = {
				UnexpectedToken : 'Unexpected token %0',
				UnexpectedNumber : 'Unexpected number',
				UnexpectedString : 'Unexpected string',
				UnexpectedIdentifier : 'Unexpected identifier',
				UnexpectedReserved : 'Unexpected reserved word',
				UnexpectedEOS : 'Unexpected end of input',
				NewlineAfterThrow : 'Illegal newline after throw',
				InvalidRegExp : 'Invalid regular expression',
				UnterminatedRegExp : 'Invalid regular expression: missing /',
				InvalidLHSInAssignment : 'Invalid left-hand side in assignment',
				InvalidLHSInForIn : 'Invalid left-hand side in for-in',
				MultipleDefaultsInSwitch : 'More than one default clause in switch statement',
				NoCatchOrFinally : 'Missing catch or finally after try',
				UnknownLabel : 'Undefined label \'%0\'',
				Redeclaration : '%0 \'%1\' has already been declared',
				IllegalContinue : 'Illegal continue statement',
				IllegalBreak : 'Illegal break statement',
				IllegalReturn : 'Illegal return statement',
				StrictModeWith : 'Strict mode code may not include a with statement',
				StrictCatchVariable : 'Catch variable may not be eval or arguments in strict mode',
				StrictVarName : 'Variable name may not be eval or arguments in strict mode',
				StrictParamName : 'Parameter name eval or arguments is not allowed in strict mode',
				StrictParamDupe : 'Strict mode function may not have duplicate parameter names',
				StrictFunctionName : 'Function name may not be eval or arguments in strict mode',
				StrictOctalLiteral : 'Octal literals are not allowed in strict mode.',
				StrictDelete : 'Delete of an unqualified identifier in strict mode.',
				StrictDuplicateProperty : 'Duplicate data property in object literal not allowed in strict mode',
				AccessorDataProperty : 'Object literal may not have data and accessor property with the same name',
				AccessorGetSet : 'Object literal may not have multiple get/set accessors with the same name',
				StrictLHSAssignment : 'Assignment to eval or arguments is not allowed in strict mode',
				StrictLHSPostfix : 'Postfix increment/decrement may not have eval or arguments operand in strict mode',
				StrictLHSPrefix : 'Prefix increment/decrement may not have eval or arguments operand in strict mode',
				StrictReservedWord : 'Use of future reserved word in strict mode'
			};

			// See also tools/generate-unicode-regex.py.
			Regex = {
				NonAsciiIdentifierStart : new RegExp('[\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc]'),
				NonAsciiIdentifierPart : new RegExp('[\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0300-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u0483-\u0487\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u05d0-\u05ea\u05f0-\u05f2\u0610-\u061a\u0620-\u0669\u066e-\u06d3\u06d5-\u06dc\u06df-\u06e8\u06ea-\u06fc\u06ff\u0710-\u074a\u074d-\u07b1\u07c0-\u07f5\u07fa\u0800-\u082d\u0840-\u085b\u08a0\u08a2-\u08ac\u08e4-\u08fe\u0900-\u0963\u0966-\u096f\u0971-\u0977\u0979-\u097f\u0981-\u0983\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bc-\u09c4\u09c7\u09c8\u09cb-\u09ce\u09d7\u09dc\u09dd\u09df-\u09e3\u09e6-\u09f1\u0a01-\u0a03\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a59-\u0a5c\u0a5e\u0a66-\u0a75\u0a81-\u0a83\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abc-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ad0\u0ae0-\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3c-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b5c\u0b5d\u0b5f-\u0b63\u0b66-\u0b6f\u0b71\u0b82\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd0\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c58\u0c59\u0c60-\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbc-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0cde\u0ce0-\u0ce3\u0ce6-\u0cef\u0cf1\u0cf2\u0d02\u0d03\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d-\u0d44\u0d46-\u0d48\u0d4a-\u0d4e\u0d57\u0d60-\u0d63\u0d66-\u0d6f\u0d7a-\u0d7f\u0d82\u0d83\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e01-\u0e3a\u0e40-\u0e4e\u0e50-\u0e59\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb9\u0ebb-\u0ebd\u0ec0-\u0ec4\u0ec6\u0ec8-\u0ecd\u0ed0-\u0ed9\u0edc-\u0edf\u0f00\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e-\u0f47\u0f49-\u0f6c\u0f71-\u0f84\u0f86-\u0f97\u0f99-\u0fbc\u0fc6\u1000-\u1049\u1050-\u109d\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u135d-\u135f\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176c\u176e-\u1770\u1772\u1773\u1780-\u17d3\u17d7\u17dc\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u1820-\u1877\u1880-\u18aa\u18b0-\u18f5\u1900-\u191c\u1920-\u192b\u1930-\u193b\u1946-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u19d0-\u19d9\u1a00-\u1a1b\u1a20-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1aa7\u1b00-\u1b4b\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1bf3\u1c00-\u1c37\u1c40-\u1c49\u1c4d-\u1c7d\u1cd0-\u1cd2\u1cd4-\u1cf6\u1d00-\u1de6\u1dfc-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u200c\u200d\u203f\u2040\u2054\u2071\u207f\u2090-\u209c\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d7f-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2de0-\u2dff\u2e2f\u3005-\u3007\u3021-\u302f\u3031-\u3035\u3038-\u303c\u3041-\u3096\u3099\u309a\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua62b\ua640-\ua66f\ua674-\ua67d\ua67f-\ua697\ua69f-\ua6f1\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua827\ua840-\ua873\ua880-\ua8c4\ua8d0-\ua8d9\ua8e0-\ua8f7\ua8fb\ua900-\ua92d\ua930-\ua953\ua960-\ua97c\ua980-\ua9c0\ua9cf-\ua9d9\uaa00-\uaa36\uaa40-\uaa4d\uaa50-\uaa59\uaa60-\uaa76\uaa7a\uaa7b\uaa80-\uaac2\uaadb-\uaadd\uaae0-\uaaef\uaaf2-\uaaf6\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabea\uabec\uabed\uabf0-\uabf9\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\ufe70-\ufe74\ufe76-\ufefc\uff10-\uff19\uff21-\uff3a\uff3f\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc]')
			};

			// Ensure the condition is true, otherwise throw an error.
			// This is only to have a better contract semantic, i.e. another safety net
			// to catch a logic error. The condition shall be fulfilled in normal case.
			// Do NOT use this to enforce a certain condition on any user input.

			function assert(condition, message) {
				if (!condition) {
					throw new Error('ASSERT: ' + message);
				}
			}

			function isDecimalDigit(ch) {
				return (ch >= 48 && ch <= 57); // 0..9
			}

			function isHexDigit(ch) {
				return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;
			}

			function isOctalDigit(ch) {
				return '01234567'.indexOf(ch) >= 0;
			}

			// 7.2 White Space

			function isWhiteSpace(ch) {
				return (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||
				(ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0);
			}

			// 7.3 Line Terminators

			function isLineTerminator(ch) {
				return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029);
			}

			// 7.6 Identifier Names and Identifiers

			function isIdentifierStart(ch) {
				return (ch === 36) || (ch === 95) || // $ (dollar) and _ (underscore)
				(ch >= 65 && ch <= 90) || // A..Z
				(ch >= 97 && ch <= 122) || // a..z
				(ch === 92) || // \ (backslash)
				((ch >= 0x80) && Regex.NonAsciiIdentifierStart.test(String.fromCharCode(ch)));
			}

			function isIdentifierPart(ch) {
				return (ch === 36) || (ch === 95) || // $ (dollar) and _ (underscore)
				(ch >= 65 && ch <= 90) || // A..Z
				(ch >= 97 && ch <= 122) || // a..z
				(ch >= 48 && ch <= 57) || // 0..9
				(ch === 92) || // \ (backslash)
				((ch >= 0x80) && Regex.NonAsciiIdentifierPart.test(String.fromCharCode(ch)));
			}

			// 7.6.1.2 Future Reserved Words

			function isFutureReservedWord(id) {
				switch (id) {
				case 'class':
				case 'enum':
				case 'export':
				case 'extends':
				case 'import':
				case 'super':
					return true;
				default:
					return false;
				}
			}

			function isStrictModeReservedWord(id) {
				switch (id) {
				case 'implements':
				case 'interface':
				case 'package':
				case 'private':
				case 'protected':
				case 'public':
				case 'static':
				case 'yield':
				case 'let':
					return true;
				default:
					return false;
				}
			}

			function isRestrictedWord(id) {
				return id === 'eval' || id === 'arguments';
			}

			// 7.6.1.1 Keywords

			function isKeyword(id) {
				if (strict && isStrictModeReservedWord(id)) {
					return true;
				}

				// 'const' is specialized as Keyword in V8.
				// 'yield' and 'let' are for compatiblity with SpiderMonkey and ES.next.
				// Some others are from future reserved words.

				switch (id.length) {
				case 2:
					return (id === 'if') || (id === 'in') || (id === 'do');
				case 3:
					return (id === 'var') || (id === 'for') || (id === 'new') ||
					(id === 'try') || (id === 'let');
				case 4:
					return (id === 'this') || (id === 'else') || (id === 'case') ||
					(id === 'void') || (id === 'with') || (id === 'enum');
				case 5:
					return (id === 'while') || (id === 'break') || (id === 'catch') ||
					(id === 'throw') || (id === 'const') || (id === 'yield') ||
					(id === 'class') || (id === 'super');
				case 6:
					return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
					(id === 'switch') || (id === 'export') || (id === 'import');
				case 7:
					return (id === 'default') || (id === 'finally') || (id === 'extends');
				case 8:
					return (id === 'function') || (id === 'continue') || (id === 'debugger');
				case 10:
					return (id === 'instanceof');
				default:
					return false;
				}
			}

			// 7.4 Comments

			function addComment(type, value, start, end, loc) {
				var comment,
				attacher;

				assert(typeof start === 'number', 'Comment must have valid position');

				// Because the way the actual token is scanned, often the comments
				// (if any) are skipped twice during the lexical analysis.
				// Thus, we need to skip adding a comment if the comment array already
				// handled it.
				if (state.lastCommentStart >= start) {
					return;
				}
				state.lastCommentStart = start;

				comment = {
					type : type,
					value : value
				};
				if (extra.range) {
					comment.range = [start, end];
				}
				if (extra.loc) {
					comment.loc = loc;
				}
				extra.comments.push(comment);

				if (extra.attachComment) {
					attacher = {
						comment : comment,
						candidate : null,
						range : [start, end]
					};
					extra.pendingComments.push(attacher);
				}
			}

			function skipSingleLineComment() {
				var start,
				loc,
				ch,
				comment;

				start = index - 2;
				loc = {
					start : {
						line : lineNumber,
						column : index - lineStart - 2
					}
				};
				while (index < length) {
					ch = source.charCodeAt(index);
					++index;
					if (isLineTerminator(ch)) {
						if (extra.comments) {
							comment = source.slice(start + 2, index - 1);
							loc.end = {
								line : lineNumber,
								column : index - lineStart - 1
							};
							addComment('Line', comment, start, index - 1, loc);
						}
						if (ch === 13 && source.charCodeAt(index) === 10) {
							++index;
						}
						++lineNumber;
						lineStart = index;
						return;
					}
				}

				if (extra.comments) {
					comment = source.slice(start + 2, index);
					loc.end = {
						line : lineNumber,
						column : index - lineStart
					};
					addComment('Line', comment, start, index, loc);
				}
			}

			function skipMultiLineComment() {
				var start,
				loc,
				ch,
				comment;

				if (extra.comments) {
					start = index - 2;
					loc = {
						start : {
							line : lineNumber,
							column : index - lineStart - 2
						}
					};
				}
				while (index < length) {
					ch = source.charCodeAt(index);
					if (isLineTerminator(ch)) {
						if (ch === 13 && source.charCodeAt(index + 1) === 10) {
							++index;
						}
						++lineNumber;
						++index;
						lineStart = index;
						if (index >= length) {
							throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
						}
					} else if (ch === 42) {
						// Block comment ends with '*/' (char #42, char #47).
						if (source.charCodeAt(index + 1) === 47) {
							++index;
							++index;
							if (extra.comments) {
								comment = source.slice(start + 2, index - 2);
								loc.end = {
									line : lineNumber,
									column : index - lineStart
								};
								addComment('Block', comment, start, index, loc);
							}
							return;
						}
						++index;
					} else {
						++index;
					}
				}

				throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
			}

			function skipComment() {
				var ch,
				start;

				start = (index === 0);
				while (index < length) {
					ch = source.charCodeAt(index);

					if (isWhiteSpace(ch)) {
						++index;
					} else if (isLineTerminator(ch)) {
						++index;
						if (ch === 13 && source.charCodeAt(index) === 10) {
							++index;
						}
						++lineNumber;
						lineStart = index;
						start = true;
					} else if (ch === 47) { // 47 is '/'
						ch = source.charCodeAt(index + 1);
						if (ch === 47) {
							++index;
							++index;
							skipSingleLineComment();
							start = true;
						} else if (ch === 42) { // 42 is '*'
							++index;
							++index;
							skipMultiLineComment();
						} else {
							break;
						}
					} else if (start && ch === 45) { // 45 is '-'
						// 62 is '>'
						if ((source.charCodeAt(index + 1) === 45) && (source.charCodeAt(index + 2) === 62)) {
							// '-->' is a single-line comment
							index += 3;
							skipSingleLineComment();
						} else {
							break;
						}
					} else if (ch === 60) { // 60 is '<'
						if (source.slice(index + 1, index + 4) === '!--') {
							++index; // `<`
							++index; // `!`
							++index; // `-`
							++index; // `-`
							skipSingleLineComment();
						} else {
							break;
						}
					} else {
						break;
					}
				}
			}

			function scanHexEscape(prefix) {
				var i,
				len,
				ch,
				code = 0;

				len = (prefix === 'u') ? 4 : 2;
				for (i = 0; i < len; ++i) {
					if (index < length && isHexDigit(source[index])) {
						ch = source[index++];
						code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
					} else {
						return '';
					}
				}
				return String.fromCharCode(code);
			}

			function getEscapedIdentifier() {
				var ch,
				id;

				ch = source.charCodeAt(index++);
				id = String.fromCharCode(ch);

				// '\u' (char #92, char #117) denotes an escaped character.
				if (ch === 92) {
					if (source.charCodeAt(index) !== 117) {
						throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
					}
					++index;
					ch = scanHexEscape('u');
					if (!ch || ch === '\\' || !isIdentifierStart(ch.charCodeAt(0))) {
						throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
					}
					id = ch;
				}
				while (index < length) {
					ch = source.charCodeAt(index);
					if (!isIdentifierPart(ch)) {
						break;
					}
					++index;
					id += String.fromCharCode(ch);

					// '\u' (char #92, char #117) denotes an escaped character.
					if (ch === 92) {
						id = id.substr(0, id.length - 1);
						if (source.charCodeAt(index) !== 117) {
							throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
						}
						++index;
						ch = scanHexEscape('u');
						if (!ch || ch === '\\' || !isIdentifierPart(ch.charCodeAt(0))) {
							throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
						}
						id += ch;
					}
				}

				return id;
			}

			function getIdentifier() {
				var start,
				ch;

				start = index++;
				while (index < length) {
					ch = source.charCodeAt(index);
					if (ch === 92) {
						// Blackslash (char #92) marks Unicode escape sequence.
						index = start;
						return getEscapedIdentifier();
					}
					if (isIdentifierPart(ch)) {
						++index;
					} else {
						break;
					}
				}

				return source.slice(start, index);
			}

			function scanIdentifier() {
				var start,
				id,
				type;

				start = index;

				// Backslash (char #92) starts an escaped character.
				id = (source.charCodeAt(index) === 92) ? getEscapedIdentifier() : getIdentifier();

				// There is no keyword or literal with only one character.
				// Thus, it must be an identifier.
				if (id.length === 1) {
					type = Token.Identifier;
				} else if (isKeyword(id)) {
					type = Token.Keyword;
				} else if (id === 'null') {
					type = Token.NullLiteral;
				} else if (id === 'true' || id === 'false') {
					type = Token.BooleanLiteral;
				} else {
					type = Token.Identifier;
				}

				return {
					type : type,
					value : id,
					lineNumber : lineNumber,
					lineStart : lineStart,
					range : [start, index]
				};
			}

			// 7.7 Punctuators

			function scanPunctuator() {
				var start = index,
				code = source.charCodeAt(index),
				code2,
				ch1 = source[index],
				ch2,
				ch3,
				ch4;

				switch (code) {

					// Check for most common single-character punctuators.
				case 46: // . dot
				case 40: // ( open bracket
				case 41: // ) close bracket
				case 59: // ; semicolon
				case 44: // , comma
				case 123: // { open curly brace
				case 125: // } close curly brace
				case 91: // [
				case 93: // ]
				case 58: // :
				case 63: // ?
				case 126: // ~
					++index;
					if (extra.tokenize) {
						if (code === 40) {
							extra.openParenToken = extra.tokens.length;
						} else if (code === 123) {
							extra.openCurlyToken = extra.tokens.length;
						}
					}
					return {
						type : Token.Punctuator,
						value : String.fromCharCode(code),
						lineNumber : lineNumber,
						lineStart : lineStart,
						range : [start, index]
					};

				default:
					code2 = source.charCodeAt(index + 1);

					// '=' (char #61) marks an assignment or comparison operator.
					if (code2 === 61) {
						switch (code) {
						case 37: // %
						case 38: // &
						case 42: // *:
						case 43: // +
						case 45: // -
						case 47: // /
						case 60: // <
						case 62: // >
						case 94: // ^
						case 124: // |
							index += 2;
							return {
								type : Token.Punctuator,
								value : String.fromCharCode(code) + String.fromCharCode(code2),
								lineNumber : lineNumber,
								lineStart : lineStart,
								range : [start, index]
							};

						case 33: // !
						case 61: // =
							index += 2;

							// !== and ===
							if (source.charCodeAt(index) === 61) {
								++index;
							}
							return {
								type : Token.Punctuator,
								value : source.slice(start, index),
								lineNumber : lineNumber,
								lineStart : lineStart,
								range : [start, index]
							};
						default:
							break;
						}
					}
					break;
				}

				// Peek more characters.

				ch2 = source[index + 1];
				ch3 = source[index + 2];
				ch4 = source[index + 3];

				// 4-character punctuator: >>>=

				if (ch1 === '>' && ch2 === '>' && ch3 === '>') {
					if (ch4 === '=') {
						index += 4;
						return {
							type : Token.Punctuator,
							value : '>>>=',
							lineNumber : lineNumber,
							lineStart : lineStart,
							range : [start, index]
						};
					}
				}

				// 3-character punctuators: === !== >>> <<= >>=

				if (ch1 === '>' && ch2 === '>' && ch3 === '>') {
					index += 3;
					return {
						type : Token.Punctuator,
						value : '>>>',
						lineNumber : lineNumber,
						lineStart : lineStart,
						range : [start, index]
					};
				}

				if (ch1 === '<' && ch2 === '<' && ch3 === '=') {
					index += 3;
					return {
						type : Token.Punctuator,
						value : '<<=',
						lineNumber : lineNumber,
						lineStart : lineStart,
						range : [start, index]
					};
				}

				if (ch1 === '>' && ch2 === '>' && ch3 === '=') {
					index += 3;
					return {
						type : Token.Punctuator,
						value : '>>=',
						lineNumber : lineNumber,
						lineStart : lineStart,
						range : [start, index]
					};
				}

				// Other 2-character punctuators: ++ -- << >> && ||

				if (ch1 === ch2 && ('+-<>&|'.indexOf(ch1) >= 0)) {
					index += 2;
					return {
						type : Token.Punctuator,
						value : ch1 + ch2,
						lineNumber : lineNumber,
						lineStart : lineStart,
						range : [start, index]
					};
				}

				if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {
					++index;
					return {
						type : Token.Punctuator,
						value : ch1,
						lineNumber : lineNumber,
						lineStart : lineStart,
						range : [start, index]
					};
				}

				throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
			}

			// 7.8.3 Numeric Literals

			function scanHexLiteral(start) {
				var number = '';
				while (index < length) {
					if (!isHexDigit(source[index])) {
						break;
					}
					number += source[index++];
				}

				if (number.length === 0) {
					throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
				}

				if (isIdentifierStart(source.charCodeAt(index))) {
					throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
				}

				return {
					type : Token.NumericLiteral,
					value : parseInt('0x' + number, 16),
					lineNumber : lineNumber,
					lineStart : lineStart,
					range : [start, index]
				};
			}

			function scanOctalLiteral(start) {
				var number = '0' + source[index++];
				while (index < length) {
					if (!isOctalDigit(source[index])) {
						break;
					}
					number += source[index++];
				}

				if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) {
					throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
				}

				return {
					type : Token.NumericLiteral,
					value : parseInt(number, 8),
					octal : true,
					lineNumber : lineNumber,
					lineStart : lineStart,
					range : [start, index]
				};
			}

			function scanNumericLiteral() {
				var number,
				start,
				ch;

				ch = source[index];
				assert(isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'),
					'Numeric literal must start with a decimal digit or a decimal point');

				start = index;
				number = '';
				if (ch !== '.') {
					number = source[index++];
					ch = source[index];

					// Hex number starts with '0x'.
					// Octal number starts with '0'.
					if (number === '0') {
						if (ch === 'x' || ch === 'X') {
							++index;
							return scanHexLiteral(start);
						}
						if (isOctalDigit(ch)) {
							return scanOctalLiteral(start);
						}

						// decimal number starts with '0' such as '09' is illegal.
						if (ch && isDecimalDigit(ch.charCodeAt(0))) {
							throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
						}
					}
					while (isDecimalDigit(source.charCodeAt(index))) {
						number += source[index++];
					}
					ch = source[index];
				}

				if (ch === '.') {
					number += source[index++];
					while (isDecimalDigit(source.charCodeAt(index))) {
						number += source[index++];
					}
					ch = source[index];
				}

				if (ch === 'e' || ch === 'E') {
					number += source[index++];

					ch = source[index];
					if (ch === '+' || ch === '-') {
						number += source[index++];
					}
					if (isDecimalDigit(source.charCodeAt(index))) {
						while (isDecimalDigit(source.charCodeAt(index))) {
							number += source[index++];
						}
					} else {
						throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
					}
				}

				if (isIdentifierStart(source.charCodeAt(index))) {
					throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
				}

				return {
					type : Token.NumericLiteral,
					value : parseFloat(number),
					lineNumber : lineNumber,
					lineStart : lineStart,
					range : [start, index]
				};
			}

			// 7.8.4 String Literals

			function scanStringLiteral() {
				var str = '',
				quote,
				start,
				ch,
				code,
				unescaped,
				restore,
				octal = false;

				quote = source[index];
				assert((quote === '\'' || quote === '"'),
					'String literal must starts with a quote');

				start = index;
				++index;
				while (index < length) {
					ch = source[index++];

					if (ch === quote) {
						quote = '';
						break;
					} else if (ch === '\\') {
						ch = source[index++];
						if (!ch || !isLineTerminator(ch.charCodeAt(0))) {
							switch (ch) {
							case 'n':
								str += '\n';
								break;
							case 'r':
								str += '\r';
								break;
							case 't':
								str += '\t';
								break;
							case 'u':
							case 'x':
								restore = index;
								unescaped = scanHexEscape(ch);
								if (unescaped) {
									str += unescaped;
								} else {
									index = restore;
									str += ch;
								}
								break;
							case 'b':
								str += '\b';
								break;
							case 'f':
								str += '\f';
								break;
							case 'v':
								str += '\x0B';
								break;

							default:
								if (isOctalDigit(ch)) {
									code = '01234567'.indexOf(ch);

									// \0 is not octal escape sequence
									if (code !== 0) {
										octal = true;
									}

									if (index < length && isOctalDigit(source[index])) {
										octal = true;
										code = code * 8 + '01234567'.indexOf(source[index++]);

										// 3 digits are only allowed when string starts
										// with 0, 1, 2, 3
										if ('0123'.indexOf(ch) >= 0 &&
											index < length &&
											isOctalDigit(source[index])) {
											code = code * 8 + '01234567'.indexOf(source[index++]);
										}
									}
									str += String.fromCharCode(code);
								} else {
									str += ch;
								}
								break;
							}
						} else {
							++lineNumber;
							if (ch === '\r' && source[index] === '\n') {
								++index;
							}
						}
					} else if (isLineTerminator(ch.charCodeAt(0))) {
						break;
					} else {
						str += ch;
					}
				}

				if (quote !== '') {
					throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
				}

				return {
					type : Token.StringLiteral,
					value : str,
					octal : octal,
					lineNumber : lineNumber,
					lineStart : lineStart,
					range : [start, index]
				};
			}

			function scanRegExp() {
				var str,
				ch,
				start,
				pattern,
				flags,
				value,
				classMarker = false,
				restore,
				terminated = false;

				lookahead = null;
				skipComment();

				start = index;
				ch = source[index];
				assert(ch === '/', 'Regular expression literal must start with a slash');
				str = source[index++];
				while (index < length) {
					ch = source[index++];
					str += ch;
					if (ch === '\\') {
						ch = source[index++];
						// ECMA-262 7.8.5
						if (isLineTerminator(ch.charCodeAt(0))) {
							throwError({}, Messages.UnterminatedRegExp);
						}
						str += ch;
					} else if (classMarker) {
						if (ch === ']') {
							classMarker = false;
						}
					} else {
						if (ch === '/') {
							terminated = true;
							break;
						} else if (ch === '[') {
							classMarker = true;
						} else if (isLineTerminator(ch.charCodeAt(0))) {
							throwError({}, Messages.UnterminatedRegExp);
						}
					}
				}

				if (!terminated) {
					throwError({}, Messages.UnterminatedRegExp);
				}

				// Exclude leading and trailing slash.
				pattern = str.substr(1, str.length - 2);

				flags = '';
				while (index < length) {
					ch = source[index];
					if (!isIdentifierPart(ch.charCodeAt(0))) {
						break;
					}

					++index;
					if (ch === '\\' && index < length) {
						ch = source[index];
						if (ch === 'u') {
							++index;
							restore = index;
							ch = scanHexEscape('u');
							if (ch) {
								flags += ch;
								for (str += '\\u'; restore < index; ++restore) {
									str += source[restore];
								}
							} else {
								index = restore;
								flags += 'u';
								str += '\\u';
							}
						} else {
							str += '\\';
						}
					} else {
						flags += ch;
						str += ch;
					}
				}

				try {
					value = new RegExp(pattern, flags);
				} catch (e) {
					throwError({}, Messages.InvalidRegExp);
				}

				peek();

				if (extra.tokenize) {
					return {
						type : Token.RegularExpression,
						value : value,
						lineNumber : lineNumber,
						lineStart : lineStart,
						range : [start, index]
					};
				}
				return {
					literal : str,
					value : value,
					range : [start, index]
				};
			}

			function collectRegex() {
				var pos,
				loc,
				regex,
				token;

				skipComment();

				pos = index;
				loc = {
					start : {
						line : lineNumber,
						column : index - lineStart
					}
				};

				regex = scanRegExp();
				loc.end = {
					line : lineNumber,
					column : index - lineStart
				};

				if (!extra.tokenize) {
					// Pop the previous token, which is likely '/' or '/='
					if (extra.tokens.length > 0) {
						token = extra.tokens[extra.tokens.length - 1];
						if (token.range[0] === pos && token.type === 'Punctuator') {
							if (token.value === '/' || token.value === '/=') {
								extra.tokens.pop();
							}
						}
					}

					extra.tokens.push({
						type : 'RegularExpression',
						value : regex.literal,
						range : [pos, index],
						loc : loc
					});
				}

				return regex;
			}

			function isIdentifierName(token) {
				return token.type === Token.Identifier ||
				token.type === Token.Keyword ||
				token.type === Token.BooleanLiteral ||
				token.type === Token.NullLiteral;
			}

			function advanceSlash() {
				var prevToken,
				checkToken;
				// Using the following algorithm:
				// https://github.com/mozilla/sweet.js/wiki/design
				prevToken = extra.tokens[extra.tokens.length - 1];
				if (!prevToken) {
					// Nothing before that: it cannot be a division.
					return collectRegex();
				}
				if (prevToken.type === 'Punctuator') {
					if (prevToken.value === ')') {
						checkToken = extra.tokens[extra.openParenToken - 1];
						if (checkToken &&
							checkToken.type === 'Keyword' &&
							(checkToken.value === 'if' ||
								checkToken.value === 'while' ||
								checkToken.value === 'for' ||
								checkToken.value === 'with')) {
							return collectRegex();
						}
						return scanPunctuator();
					}
					if (prevToken.value === '}') {
						// Dividing a function by anything makes little sense,
						// but we have to check for that.
						if (extra.tokens[extra.openCurlyToken - 3] &&
							extra.tokens[extra.openCurlyToken - 3].type === 'Keyword') {
							// Anonymous function.
							checkToken = extra.tokens[extra.openCurlyToken - 4];
							if (!checkToken) {
								return scanPunctuator();
							}
						} else if (extra.tokens[extra.openCurlyToken - 4] &&
							extra.tokens[extra.openCurlyToken - 4].type === 'Keyword') {
							// Named function.
							checkToken = extra.tokens[extra.openCurlyToken - 5];
							if (!checkToken) {
								return collectRegex();
							}
						} else {
							return scanPunctuator();
						}
						// checkToken determines whether the function is
						// a declaration or an expression.
						if (FnExprTokens.indexOf(checkToken.value) >= 0) {
							// It is an expression.
							return scanPunctuator();
						}
						// It is a declaration.
						return collectRegex();
					}
					return collectRegex();
				}
				if (prevToken.type === 'Keyword') {
					return collectRegex();
				}
				return scanPunctuator();
			}

			function advance() {
				var ch;

				skipComment();

				if (index >= length) {
					return {
						type : Token.EOF,
						lineNumber : lineNumber,
						lineStart : lineStart,
						range : [index, index]
					};
				}

				ch = source.charCodeAt(index);

				// Very common: ( and ) and ;
				if (ch === 40 || ch === 41 || ch === 58) {
					return scanPunctuator();
				}

				// String literal starts with single quote (#39) or double quote (#34).
				if (ch === 39 || ch === 34) {
					return scanStringLiteral();
				}

				if (isIdentifierStart(ch)) {
					return scanIdentifier();
				}

				// Dot (.) char #46 can also start a floating-point number, hence the need
				// to check the next character.
				if (ch === 46) {
					if (isDecimalDigit(source.charCodeAt(index + 1))) {
						return scanNumericLiteral();
					}
					return scanPunctuator();
				}

				if (isDecimalDigit(ch)) {
					return scanNumericLiteral();
				}

				// Slash (/) char #47 can also start a regex.
				if (extra.tokenize && ch === 47) {
					return advanceSlash();
				}

				return scanPunctuator();
			}

			function collectToken() {
				var start,
				loc,
				token,
				range,
				value;

				skipComment();
				start = index;
				loc = {
					start : {
						line : lineNumber,
						column : index - lineStart
					}
				};

				token = advance();
				loc.end = {
					line : lineNumber,
					column : index - lineStart
				};

				if (token.type !== Token.EOF) {
					range = [token.range[0], token.range[1]];
					value = source.slice(token.range[0], token.range[1]);
					extra.tokens.push({
						type : TokenName[token.type],
						value : value,
						range : range,
						loc : loc
					});
				}

				return token;
			}

			function lex() {
				var token;

				token = lookahead;
				index = token.range[1];
				lineNumber = token.lineNumber;
				lineStart = token.lineStart;

				lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();

				index = token.range[1];
				lineNumber = token.lineNumber;
				lineStart = token.lineStart;

				return token;
			}

			function peek() {
				var pos,
				line,
				start;

				pos = index;
				line = lineNumber;
				start = lineStart;
				lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();
				index = pos;
				lineNumber = line;
				lineStart = start;
			}

			SyntaxTreeDelegate = {

				name : 'SyntaxTree',

				markStart : function () {
					if (extra.loc) {
						state.markerStack.push(index - lineStart);
						state.markerStack.push(lineNumber);
					}
					if (extra.range) {
						state.markerStack.push(index);
					}
				},

				processComment : function (node) {
					var i,
					attacher,
					comment,
					pos,
					len;

					if (typeof node.type === 'undefined') {
						return;
					}
					for (i = 0; i < extra.pendingComments.length; ++i) {
						attacher = extra.pendingComments[i];
						comment = attacher.comment;
						pos = attacher.candidate ? attacher.candidate.range[0] : attacher.range[0];
						if (node.type !== Syntax.Program && node.range[0] >= pos) {
							if (attacher.candidate) {
								len = attacher.candidate.range[1] - attacher.candidate.range[0];
								if ((node.range[1] - node.range[0]) >= len) {
									attacher.candidate = node;
								}
							} else {
								attacher.candidate = node;
							}
						}
					}
				},

				markEnd : function (node) {
					if (extra.range) {
						node.range = [state.markerStack.pop(), index];
					}
					if (extra.loc) {
						node.loc = {
							start : {
								line : state.markerStack.pop(),
								column : state.markerStack.pop()
							},
							end : {
								line : lineNumber,
								column : index - lineStart
							}
						};
						this.postProcess(node);
					}
					if (extra.attachComment) {
						this.processComment(node);
					}
					return node;
				},

				markEndIf : function (node) {
					if (node.range || node.loc) {
						if (extra.loc) {
							state.markerStack.pop();
							state.markerStack.pop();
						}
						if (extra.range) {
							state.markerStack.pop();
						}
					} else {
						this.markEnd(node);
					}
					return node;
				},

				postProcess : function (node) {
					if (extra.source) {
						node.loc.source = extra.source;
					}
					return node;
				},

				createArrayExpression : function (elements) {
					return {
						type : Syntax.ArrayExpression,
						elements : elements
					};
				},

				createAssignmentExpression : function (operator, left, right) {
					return {
						type : Syntax.AssignmentExpression,
						operator : operator,
						left : left,
						right : right
					};
				},

				createBinaryExpression : function (operator, left, right) {
					var type = (operator === '||' || operator === '&&') ? Syntax.LogicalExpression :
					Syntax.BinaryExpression;
					return {
						type : type,
						operator : operator,
						left : left,
						right : right
					};
				},

				createBlockStatement : function (body) {
					return {
						type : Syntax.BlockStatement,
						body : body
					};
				},

				createBreakStatement : function (label) {
					return {
						type : Syntax.BreakStatement,
						label : label
					};
				},

				createCallExpression : function (callee, args) {
					return {
						type : Syntax.CallExpression,
						callee : callee,
						'arguments' : args
					};
				},

				createCatchClause : function (param, body) {
					return {
						type : Syntax.CatchClause,
						param : param,
						body : body
					};
				},

				createConditionalExpression : function (test, consequent, alternate) {
					return {
						type : Syntax.ConditionalExpression,
						test : test,
						consequent : consequent,
						alternate : alternate
					};
				},

				createContinueStatement : function (label) {
					return {
						type : Syntax.ContinueStatement,
						label : label
					};
				},

				createDebuggerStatement : function () {
					return {
						type : Syntax.DebuggerStatement
					};
				},

				createDoWhileStatement : function (body, test) {
					return {
						type : Syntax.DoWhileStatement,
						body : body,
						test : test
					};
				},

				createEmptyStatement : function () {
					return {
						type : Syntax.EmptyStatement
					};
				},

				createExpressionStatement : function (expression) {
					return {
						type : Syntax.ExpressionStatement,
						expression : expression
					};
				},

				createForStatement : function (init, test, update, body) {
					return {
						type : Syntax.ForStatement,
						init : init,
						test : test,
						update : update,
						body : body
					};
				},

				createForInStatement : function (left, right, body) {
					return {
						type : Syntax.ForInStatement,
						left : left,
						right : right,
						body : body,
						each : false
					};
				},

				createFunctionDeclaration : function (id, params, defaults, body) {
					return {
						type : Syntax.FunctionDeclaration,
						id : id,
						params : params,
						defaults : defaults,
						body : body,
						rest : null,
						generator : false,
						expression : false
					};
				},

				createFunctionExpression : function (id, params, defaults, body) {
					return {
						type : Syntax.FunctionExpression,
						id : id,
						params : params,
						defaults : defaults,
						body : body,
						rest : null,
						generator : false,
						expression : false
					};
				},

				createIdentifier : function (name) {
					return {
						type : Syntax.Identifier,
						name : name
					};
				},

				createIfStatement : function (test, consequent, alternate) {
					return {
						type : Syntax.IfStatement,
						test : test,
						consequent : consequent,
						alternate : alternate
					};
				},

				createLabeledStatement : function (label, body) {
					return {
						type : Syntax.LabeledStatement,
						label : label,
						body : body
					};
				},

				createLiteral : function (token) {
					return {
						type : Syntax.Literal,
						value : token.value,
						raw : source.slice(token.range[0], token.range[1])
					};
				},

				createMemberExpression : function (accessor, object, property) {
					return {
						type : Syntax.MemberExpression,
						computed : accessor === '[',
						object : object,
						property : property
					};
				},

				createNewExpression : function (callee, args) {
					return {
						type : Syntax.NewExpression,
						callee : callee,
						'arguments' : args
					};
				},

				createObjectExpression : function (properties) {
					return {
						type : Syntax.ObjectExpression,
						properties : properties
					};
				},

				createPostfixExpression : function (operator, argument) {
					return {
						type : Syntax.UpdateExpression,
						operator : operator,
						argument : argument,
						prefix : false
					};
				},

				createProgram : function (body) {
					return {
						type : Syntax.Program,
						body : body
					};
				},

				createProperty : function (kind, key, value) {
					return {
						type : Syntax.Property,
						key : key,
						value : value,
						kind : kind
					};
				},

				createReturnStatement : function (argument) {
					return {
						type : Syntax.ReturnStatement,
						argument : argument
					};
				},

				createSequenceExpression : function (expressions) {
					return {
						type : Syntax.SequenceExpression,
						expressions : expressions
					};
				},

				createSwitchCase : function (test, consequent) {
					return {
						type : Syntax.SwitchCase,
						test : test,
						consequent : consequent
					};
				},

				createSwitchStatement : function (discriminant, cases) {
					return {
						type : Syntax.SwitchStatement,
						discriminant : discriminant,
						cases : cases
					};
				},

				createThisExpression : function () {
					return {
						type : Syntax.ThisExpression
					};
				},

				createThrowStatement : function (argument) {
					return {
						type : Syntax.ThrowStatement,
						argument : argument
					};
				},

				createTryStatement : function (block, guardedHandlers, handlers, finalizer) {
					return {
						type : Syntax.TryStatement,
						block : block,
						guardedHandlers : guardedHandlers,
						handlers : handlers,
						finalizer : finalizer
					};
				},

				createUnaryExpression : function (operator, argument) {
					if (operator === '++' || operator === '--') {
						return {
							type : Syntax.UpdateExpression,
							operator : operator,
							argument : argument,
							prefix : true
						};
					}
					return {
						type : Syntax.UnaryExpression,
						operator : operator,
						argument : argument,
						prefix : true
					};
				},

				createVariableDeclaration : function (declarations, kind) {
					return {
						type : Syntax.VariableDeclaration,
						declarations : declarations,
						kind : kind
					};
				},

				createVariableDeclarator : function (id, init) {
					return {
						type : Syntax.VariableDeclarator,
						id : id,
						init : init
					};
				},

				createWhileStatement : function (test, body) {
					return {
						type : Syntax.WhileStatement,
						test : test,
						body : body
					};
				},

				createWithStatement : function (object, body) {
					return {
						type : Syntax.WithStatement,
						object : object,
						body : body
					};
				}
			};

			// Return true if there is a line terminator before the next token.

			function peekLineTerminator() {
				var pos,
				line,
				start,
				found;

				pos = index;
				line = lineNumber;
				start = lineStart;
				skipComment();
				found = lineNumber !== line;
				index = pos;
				lineNumber = line;
				lineStart = start;

				return found;
			}

			// Throw an exception

			function throwError(token, messageFormat) {
				var error,
				args = Array.prototype.slice.call(arguments, 2),
				msg = messageFormat.replace(
						/%(\d)/g,
						function (whole, index) {
						assert(index < args.length, 'Message reference must be in range');
						return args[index];
					});

				if (typeof token.lineNumber === 'number') {
					error = new Error('Line ' + token.lineNumber + ': ' + msg);
					error.index = token.range[0];
					error.lineNumber = token.lineNumber;
					error.column = token.range[0] - lineStart + 1;
				} else {
					error = new Error('Line ' + lineNumber + ': ' + msg);
					error.index = index;
					error.lineNumber = lineNumber;
					error.column = index - lineStart + 1;
				}

				error.description = msg;
				throw error;
			}

			function throwErrorTolerant() {
				try {
					throwError.apply(null, arguments);
				} catch (e) {
					if (extra.errors) {
						extra.errors.push(e);
					} else {
						throw e;
					}
				}
			}

			// Throw an exception because of the token.

			function throwUnexpected(token) {
				if (token.type === Token.EOF) {
					throwError(token, Messages.UnexpectedEOS);
				}

				if (token.type === Token.NumericLiteral) {
					throwError(token, Messages.UnexpectedNumber);
				}

				if (token.type === Token.StringLiteral) {
					throwError(token, Messages.UnexpectedString);
				}

				if (token.type === Token.Identifier) {
					throwError(token, Messages.UnexpectedIdentifier);
				}

				if (token.type === Token.Keyword) {
					if (isFutureReservedWord(token.value)) {
						throwError(token, Messages.UnexpectedReserved);
					} else if (strict && isStrictModeReservedWord(token.value)) {
						throwErrorTolerant(token, Messages.StrictReservedWord);
						return;
					}
					throwError(token, Messages.UnexpectedToken, token.value);
				}

				// BooleanLiteral, NullLiteral, or Punctuator.
				throwError(token, Messages.UnexpectedToken, token.value);
			}

			// Expect the next token to match the specified punctuator.
			// If not, an exception will be thrown.

			function expect(value) {
				var token = lex();
				if (token.type !== Token.Punctuator || token.value !== value) {
					throwUnexpected(token);
				}
			}

			// Expect the next token to match the specified keyword.
			// If not, an exception will be thrown.

			function expectKeyword(keyword) {
				var token = lex();
				if (token.type !== Token.Keyword || token.value !== keyword) {
					throwUnexpected(token);
				}
			}

			// Return true if the next token matches the specified punctuator.

			function match(value) {
				return lookahead.type === Token.Punctuator && lookahead.value === value;
			}

			// Return true if the next token matches the specified keyword

			function matchKeyword(keyword) {
				return lookahead.type === Token.Keyword && lookahead.value === keyword;
			}

			// Return true if the next token is an assignment operator

			function matchAssign() {
				var op;

				if (lookahead.type !== Token.Punctuator) {
					return false;
				}
				op = lookahead.value;
				return op === '=' ||
				op === '*=' ||
				op === '/=' ||
				op === '%=' ||
				op === '+=' ||
				op === '-=' ||
				op === '<<=' ||
				op === '>>=' ||
				op === '>>>=' ||
				op === '&=' ||
				op === '^=' ||
				op === '|=';
			}

			function consumeSemicolon() {
				var line;

				// Catch the very common case first: immediately a semicolon (char #59).
				if (source.charCodeAt(index) === 59) {
					lex();
					return;
				}

				line = lineNumber;
				skipComment();
				if (lineNumber !== line) {
					return;
				}

				if (match(';')) {
					lex();
					return;
				}

				if (lookahead.type !== Token.EOF && !match('}')) {
					throwUnexpected(lookahead);
				}
			}

			// Return true if provided expression is LeftHandSideExpression

			function isLeftHandSide(expr) {
				return expr.type === Syntax.Identifier || expr.type === Syntax.MemberExpression;
			}

			// 11.1.4 Array Initialiser

			function parseArrayInitialiser() {
				var elements = [];

				expect('[');
				while (!match(']')) {
					if (match(',')) {
						lex();
						elements.push(null);
					} else {
						elements.push(parseAssignmentExpression());

						if (!match(']')) {
							expect(',');
						}
					}
				}

				expect(']');

				return delegate.createArrayExpression(elements);
			}

			// 11.1.5 Object Initialiser

			function parsePropertyFunction(param, first) {
				var previousStrict,
				body;

				previousStrict = strict;
				skipComment();
				delegate.markStart();
				body = parseFunctionSourceElements();
				if (first && strict && isRestrictedWord(param[0].name)) {
					throwErrorTolerant(first, Messages.StrictParamName);
				}
				strict = previousStrict;
				return delegate.markEnd(delegate.createFunctionExpression(null, param, [], body));
			}

			function parseObjectPropertyKey() {
				var token;

				skipComment();
				delegate.markStart();
				token = lex();

				// Note: This function is called only from parseObjectProperty(), where
				// EOF and Punctuator tokens are already filtered out.

				if (token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {
					if (strict && token.octal) {
						throwErrorTolerant(token, Messages.StrictOctalLiteral);
					}
					return delegate.markEnd(delegate.createLiteral(token));
				}

				return delegate.markEnd(delegate.createIdentifier(token.value));
			}

			function parseObjectProperty() {
				var token,
				key,
				id,
				value,
				param;

				token = lookahead;
				skipComment();
				delegate.markStart();

				if (token.type === Token.Identifier) {

					id = parseObjectPropertyKey();

					// Property Assignment: Getter and Setter.

					if (token.value === 'get' && !match(':')) {
						key = parseObjectPropertyKey();
						expect('(');
						expect(')');
						value = parsePropertyFunction([]);
						return delegate.markEnd(delegate.createProperty('get', key, value));
					}
					if (token.value === 'set' && !match(':')) {
						key = parseObjectPropertyKey();
						expect('(');
						token = lookahead;
						if (token.type !== Token.Identifier) {
							expect(')');
							throwErrorTolerant(token, Messages.UnexpectedToken, token.value);
							value = parsePropertyFunction([]);
						} else {
							param = [parseVariableIdentifier()];
							expect(')');
							value = parsePropertyFunction(param, token);
						}
						return delegate.markEnd(delegate.createProperty('set', key, value));
					}
					expect(':');
					value = parseAssignmentExpression();
					return delegate.markEnd(delegate.createProperty('init', id, value));
				}
				if (token.type === Token.EOF || token.type === Token.Punctuator) {
					throwUnexpected(token);
				} else {
					key = parseObjectPropertyKey();
					expect(':');
					value = parseAssignmentExpression();
					return delegate.markEnd(delegate.createProperty('init', key, value));
				}
			}

			function parseObjectInitialiser() {
				var properties = [],
				property,
				name,
				key,
				kind,
				map = {},
				toString = String;

				expect('{');
				while (!match('}')) {
					property = parseObjectProperty();

					if (property.key.type === Syntax.Identifier) {
						name = property.key.name;
					} else {
						name = toString(property.key.value);
					}
					kind = (property.kind === 'init') ? PropertyKind.Data : (property.kind === 'get') ? PropertyKind.Get : PropertyKind.Set;

					key = '$' + name;
					if (Object.prototype.hasOwnProperty.call(map, key)) {
						if (map[key] === PropertyKind.Data) {
							if (strict && kind === PropertyKind.Data) {
								throwErrorTolerant({}, Messages.StrictDuplicateProperty);
							} else if (kind !== PropertyKind.Data) {
								throwErrorTolerant({}, Messages.AccessorDataProperty);
							}
						} else {
							if (kind === PropertyKind.Data) {
								throwErrorTolerant({}, Messages.AccessorDataProperty);
							} else if (map[key] & kind) {
								throwErrorTolerant({}, Messages.AccessorGetSet);
							}
						}
						map[key] |= kind;
					} else {
						map[key] = kind;
					}

					properties.push(property);

					if (!match('}')) {
						expect(',');
					}
				}

				expect('}');

				return delegate.createObjectExpression(properties);
			}

			// 11.1.6 The Grouping Operator

			function parseGroupExpression() {
				var expr;

				expect('(');

				expr = parseExpression();

				expect(')');

				return expr;
			}

			// 11.1 Primary Expressions

			function parsePrimaryExpression() {
				var type,
				token,
				expr;

				if (match('(')) {
					return parseGroupExpression();
				}

				type = lookahead.type;
				delegate.markStart();

				if (type === Token.Identifier) {
					expr = delegate.createIdentifier(lex().value);
				} else if (type === Token.StringLiteral || type === Token.NumericLiteral) {
					if (strict && lookahead.octal) {
						throwErrorTolerant(lookahead, Messages.StrictOctalLiteral);
					}
					expr = delegate.createLiteral(lex());
				} else if (type === Token.Keyword) {
					if (matchKeyword('this')) {
						lex();
						expr = delegate.createThisExpression();
					} else if (matchKeyword('function')) {
						expr = parseFunctionExpression();
					}
				} else if (type === Token.BooleanLiteral) {
					token = lex();
					token.value = (token.value === 'true');
					expr = delegate.createLiteral(token);
				} else if (type === Token.NullLiteral) {
					token = lex();
					token.value = null;
					expr = delegate.createLiteral(token);
				} else if (match('[')) {
					expr = parseArrayInitialiser();
				} else if (match('{')) {
					expr = parseObjectInitialiser();
				} else if (match('/') || match('/=')) {
					if (typeof extra.tokens !== 'undefined') {
						expr = delegate.createLiteral(collectRegex());
					} else {
						expr = delegate.createLiteral(scanRegExp());
					}
				}

				if (expr) {
					return delegate.markEnd(expr);
				}

				throwUnexpected(lex());
			}

			// 11.2 Left-Hand-Side Expressions

			function parseArguments() {
				var args = [];

				expect('(');

				if (!match(')')) {
					while (index < length) {
						args.push(parseAssignmentExpression());
						if (match(')')) {
							break;
						}
						expect(',');
					}
				}

				expect(')');

				return args;
			}

			function parseNonComputedProperty() {
				var token;

				delegate.markStart();
				token = lex();

				if (!isIdentifierName(token)) {
					throwUnexpected(token);
				}

				return delegate.markEnd(delegate.createIdentifier(token.value));
			}

			function parseNonComputedMember() {
				expect('.');

				return parseNonComputedProperty();
			}

			function parseComputedMember() {
				var expr;

				expect('[');

				expr = parseExpression();

				expect(']');

				return expr;
			}

			function parseNewExpression() {
				var callee,
				args;

				delegate.markStart();
				expectKeyword('new');
				callee = parseLeftHandSideExpression();
				args = match('(') ? parseArguments() : [];

				return delegate.markEnd(delegate.createNewExpression(callee, args));
			}

			function parseLeftHandSideExpressionAllowCall() {
				var marker,
				previousAllowIn,
				expr,
				args,
				property;

				marker = createLocationMarker();

				previousAllowIn = state.allowIn;
				state.allowIn = true;
				expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();
				state.allowIn = previousAllowIn;
				while (match('.') || match('[') || match('(')) {
					if (match('(')) {
						args = parseArguments();
						expr = delegate.createCallExpression(expr, args);
					} else if (match('[')) {
						property = parseComputedMember();
						expr = delegate.createMemberExpression('[', expr, property);
					} else {
						property = parseNonComputedMember();
						expr = delegate.createMemberExpression('.', expr, property);
					}
					if (marker) {
						marker.end();
						marker.apply(expr);
					}
				}

				return expr;
			}

			function parseLeftHandSideExpression() {
				var marker,
				previousAllowIn,
				expr,
				property;

				marker = createLocationMarker();

				previousAllowIn = state.allowIn;
				expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();
				state.allowIn = previousAllowIn;
				while (match('.') || match('[')) {
					if (match('[')) {
						property = parseComputedMember();
						expr = delegate.createMemberExpression('[', expr, property);
					} else {
						property = parseNonComputedMember();
						expr = delegate.createMemberExpression('.', expr, property);
					}
					if (marker) {
						marker.end();
						marker.apply(expr);
					}
				}

				return expr;
			}

			// 11.3 Postfix Expressions

			function parsePostfixExpression() {
				var expr,
				token;

				delegate.markStart();
				expr = parseLeftHandSideExpressionAllowCall();

				if (lookahead.type === Token.Punctuator) {
					if ((match('++') || match('--')) && !peekLineTerminator()) {
						// 11.3.1, 11.3.2
						if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
							throwErrorTolerant({}, Messages.StrictLHSPostfix);
						}

						if (!isLeftHandSide(expr)) {
							throwErrorTolerant({}, Messages.InvalidLHSInAssignment);
						}

						token = lex();
						expr = delegate.createPostfixExpression(token.value, expr);
					}
				}

				return delegate.markEndIf(expr);
			}

			// 11.4 Unary Operators

			function parseUnaryExpression() {
				var token,
				expr;

				delegate.markStart();

				if (lookahead.type !== Token.Punctuator && lookahead.type !== Token.Keyword) {
					expr = parsePostfixExpression();
				} else if (match('++') || match('--')) {
					token = lex();
					expr = parseUnaryExpression();
					// 11.4.4, 11.4.5
					if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
						throwErrorTolerant({}, Messages.StrictLHSPrefix);
					}

					if (!isLeftHandSide(expr)) {
						throwErrorTolerant({}, Messages.InvalidLHSInAssignment);
					}

					expr = delegate.createUnaryExpression(token.value, expr);
				} else if (match('+') || match('-') || match('~') || match('!')) {
					token = lex();
					expr = parseUnaryExpression();
					expr = delegate.createUnaryExpression(token.value, expr);
				} else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {
					token = lex();
					expr = parseUnaryExpression();
					expr = delegate.createUnaryExpression(token.value, expr);
					if (strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) {
						throwErrorTolerant({}, Messages.StrictDelete);
					}
				} else {
					expr = parsePostfixExpression();
				}

				return delegate.markEndIf(expr);
			}

			function binaryPrecedence(token, allowIn) {
				var prec = 0;

				if (token.type !== Token.Punctuator && token.type !== Token.Keyword) {
					return 0;
				}

				switch (token.value) {
				case '||':
					prec = 1;
					break;

				case '&&':
					prec = 2;
					break;

				case '|':
					prec = 3;
					break;

				case '^':
					prec = 4;
					break;

				case '&':
					prec = 5;
					break;

				case '==':
				case '!=':
				case '===':
				case '!==':
					prec = 6;
					break;

				case '<':
				case '>':
				case '<=':
				case '>=':
				case 'instanceof':
					prec = 7;
					break;

				case 'in':
					prec = allowIn ? 7 : 0;
					break;

				case '<<':
				case '>>':
				case '>>>':
					prec = 8;
					break;

				case '+':
				case '-':
					prec = 9;
					break;

				case '*':
				case '/':
				case '%':
					prec = 11;
					break;

				default:
					break;
				}

				return prec;
			}

			// 11.5 Multiplicative Operators
			// 11.6 Additive Operators
			// 11.7 Bitwise Shift Operators
			// 11.8 Relational Operators
			// 11.9 Equality Operators
			// 11.10 Binary Bitwise Operators
			// 11.11 Binary Logical Operators

			function parseBinaryExpression() {
				var marker,
				markers,
				expr,
				token,
				prec,
				stack,
				right,
				operator,
				left,
				i;

				marker = createLocationMarker();
				left = parseUnaryExpression();

				token = lookahead;
				prec = binaryPrecedence(token, state.allowIn);
				if (prec === 0) {
					return left;
				}
				token.prec = prec;
				lex();

				markers = [marker, createLocationMarker()];
				right = parseUnaryExpression();

				stack = [left, token, right];
				while ((prec = binaryPrecedence(lookahead, state.allowIn)) > 0) {

					// Reduce: make a binary expression from the three topmost entries.
					while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {
						right = stack.pop();
						operator = stack.pop().value;
						left = stack.pop();
						expr = delegate.createBinaryExpression(operator, left, right);
						markers.pop();
						marker = markers.pop();
						if (marker) {
							marker.end();
							marker.apply(expr);
						}
						stack.push(expr);
						markers.push(marker);
					}

					// Shift.
					token = lex();
					token.prec = prec;
					stack.push(token);
					markers.push(createLocationMarker());
					expr = parseUnaryExpression();
					stack.push(expr);
				}

				// Final reduce to clean-up the stack.
				i = stack.length - 1;
				expr = stack[i];
				markers.pop();
				while (i > 1) {
					expr = delegate.createBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
					i -= 2;
					marker = markers.pop();
					if (marker) {
						marker.end();
						marker.apply(expr);
					}
				}

				return expr;
			}

			// 11.12 Conditional Operator

			function parseConditionalExpression() {
				var expr,
				previousAllowIn,
				consequent,
				alternate;

				delegate.markStart();
				expr = parseBinaryExpression();

				if (match('?')) {
					lex();
					previousAllowIn = state.allowIn;
					state.allowIn = true;
					consequent = parseAssignmentExpression();
					state.allowIn = previousAllowIn;
					expect(':');
					alternate = parseAssignmentExpression();

					expr = delegate.markEnd(delegate.createConditionalExpression(expr, consequent, alternate));
				} else {
					delegate.markEnd({});
				}

				return expr;
			}

			// 11.13 Assignment Operators

			function parseAssignmentExpression() {
				var token,
				left,
				right,
				node;

				token = lookahead;
				delegate.markStart();
				node = left = parseConditionalExpression();

				if (matchAssign()) {
					// LeftHandSideExpression
					if (!isLeftHandSide(left)) {
						throwErrorTolerant({}, Messages.InvalidLHSInAssignment);
					}

					// 11.13.1
					if (strict && left.type === Syntax.Identifier && isRestrictedWord(left.name)) {
						throwErrorTolerant(token, Messages.StrictLHSAssignment);
					}

					token = lex();
					right = parseAssignmentExpression();
					node = delegate.createAssignmentExpression(token.value, left, right);
				}

				return delegate.markEndIf(node);
			}

			// 11.14 Comma Operator

			function parseExpression() {
				var expr;

				delegate.markStart();
				expr = parseAssignmentExpression();

				if (match(',')) {
					expr = delegate.createSequenceExpression([expr]);
					while (index < length) {
						if (!match(',')) {
							break;
						}
						lex();
						expr.expressions.push(parseAssignmentExpression());
					}
				}

				return delegate.markEndIf(expr);
			}

			// 12.1 Block

			function parseStatementList() {
				var list = [],
				statement;
				while (index < length) {
					if (match('}')) {
						break;
					}
					statement = parseSourceElement();
					if (typeof statement === 'undefined') {
						break;
					}
					list.push(statement);
				}

				return list;
			}

			function parseBlock() {
				var block;

				skipComment();
				delegate.markStart();
				expect('{');

				block = parseStatementList();

				expect('}');

				return delegate.markEnd(delegate.createBlockStatement(block));
			}

			// 12.2 Variable Statement

			function parseVariableIdentifier() {
				var token;

				skipComment();
				delegate.markStart();
				token = lex();

				if (token.type !== Token.Identifier) {
					throwUnexpected(token);
				}

				return delegate.markEnd(delegate.createIdentifier(token.value));
			}

			function parseVariableDeclaration(kind) {
				var init = null,
				id;

				skipComment();
				delegate.markStart();
				id = parseVariableIdentifier();

				// 12.2.1
				if (strict && isRestrictedWord(id.name)) {
					throwErrorTolerant({}, Messages.StrictVarName);
				}

				if (kind === 'const') {
					expect('=');
					init = parseAssignmentExpression();
				} else if (match('=')) {
					lex();
					init = parseAssignmentExpression();
				}

				return delegate.markEnd(delegate.createVariableDeclarator(id, init));
			}

			function parseVariableDeclarationList(kind) {
				var list = [];

				do {
					list.push(parseVariableDeclaration(kind));
					if (!match(',')) {
						break;
					}
					lex();
				} while (index < length);

				return list;
			}

			function parseVariableStatement() {
				var declarations;

				expectKeyword('var');

				declarations = parseVariableDeclarationList();

				consumeSemicolon();

				return delegate.createVariableDeclaration(declarations, 'var');
			}

			// kind may be `const` or `let`
			// Both are experimental and not in the specification yet.
			// see http://wiki.ecmascript.org/doku.php?id=harmony:const
			// and http://wiki.ecmascript.org/doku.php?id=harmony:let
			function parseConstLetDeclaration(kind) {
				var declarations;

				skipComment();
				delegate.markStart();

				expectKeyword(kind);

				declarations = parseVariableDeclarationList(kind);

				consumeSemicolon();

				return delegate.markEnd(delegate.createVariableDeclaration(declarations, kind));
			}

			// 12.3 Empty Statement

			function parseEmptyStatement() {
				expect(';');
				return delegate.createEmptyStatement();
			}

			// 12.4 Expression Statement

			function parseExpressionStatement() {
				var expr = parseExpression();
				consumeSemicolon();
				return delegate.createExpressionStatement(expr);
			}

			// 12.5 If statement

			function parseIfStatement() {
				var test,
				consequent,
				alternate;

				expectKeyword('if');

				expect('(');

				test = parseExpression();

				expect(')');

				consequent = parseStatement();

				if (matchKeyword('else')) {
					lex();
					alternate = parseStatement();
				} else {
					alternate = null;
				}

				return delegate.createIfStatement(test, consequent, alternate);
			}

			// 12.6 Iteration Statements

			function parseDoWhileStatement() {
				var body,
				test,
				oldInIteration;

				expectKeyword('do');

				oldInIteration = state.inIteration;
				state.inIteration = true;

				body = parseStatement();

				state.inIteration = oldInIteration;

				expectKeyword('while');

				expect('(');

				test = parseExpression();

				expect(')');

				if (match(';')) {
					lex();
				}

				return delegate.createDoWhileStatement(body, test);
			}

			function parseWhileStatement() {
				var test,
				body,
				oldInIteration;

				expectKeyword('while');

				expect('(');

				test = parseExpression();

				expect(')');

				oldInIteration = state.inIteration;
				state.inIteration = true;

				body = parseStatement();

				state.inIteration = oldInIteration;

				return delegate.createWhileStatement(test, body);
			}

			function parseForVariableDeclaration() {
				var token,
				declarations;

				delegate.markStart();
				token = lex();
				declarations = parseVariableDeclarationList();

				return delegate.markEnd(delegate.createVariableDeclaration(declarations, token.value));
			}

			function parseForStatement() {
				var init,
				test,
				update,
				left,
				right,
				body,
				oldInIteration;

				init = test = update = null;

				expectKeyword('for');

				expect('(');

				if (match(';')) {
					lex();
				} else {
					if (matchKeyword('var') || matchKeyword('let')) {
						state.allowIn = false;
						init = parseForVariableDeclaration();
						state.allowIn = true;

						if (init.declarations.length === 1 && matchKeyword('in')) {
							lex();
							left = init;
							right = parseExpression();
							init = null;
						}
					} else {
						state.allowIn = false;
						init = parseExpression();
						state.allowIn = true;

						if (matchKeyword('in')) {
							// LeftHandSideExpression
							if (!isLeftHandSide(init)) {
								throwErrorTolerant({}, Messages.InvalidLHSInForIn);
							}

							lex();
							left = init;
							right = parseExpression();
							init = null;
						}
					}

					if (typeof left === 'undefined') {
						expect(';');
					}
				}

				if (typeof left === 'undefined') {

					if (!match(';')) {
						test = parseExpression();
					}
					expect(';');

					if (!match(')')) {
						update = parseExpression();
					}
				}

				expect(')');

				oldInIteration = state.inIteration;
				state.inIteration = true;

				body = parseStatement();

				state.inIteration = oldInIteration;

				return (typeof left === 'undefined') ?
				delegate.createForStatement(init, test, update, body) :
				delegate.createForInStatement(left, right, body);
			}

			// 12.7 The continue statement

			function parseContinueStatement() {
				var label = null,
				key;

				expectKeyword('continue');

				// Optimize the most common form: 'continue;'.
				if (source.charCodeAt(index) === 59) {
					lex();

					if (!state.inIteration) {
						throwError({}, Messages.IllegalContinue);
					}

					return delegate.createContinueStatement(null);
				}

				if (peekLineTerminator()) {
					if (!state.inIteration) {
						throwError({}, Messages.IllegalContinue);
					}

					return delegate.createContinueStatement(null);
				}

				if (lookahead.type === Token.Identifier) {
					label = parseVariableIdentifier();

					key = '$' + label.name;
					if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
						throwError({}, Messages.UnknownLabel, label.name);
					}
				}

				consumeSemicolon();

				if (label === null && !state.inIteration) {
					throwError({}, Messages.IllegalContinue);
				}

				return delegate.createContinueStatement(label);
			}

			// 12.8 The break statement

			function parseBreakStatement() {
				var label = null,
				key;

				expectKeyword('break');

				// Catch the very common case first: immediately a semicolon (char #59).
				if (source.charCodeAt(index) === 59) {
					lex();

					if (!(state.inIteration || state.inSwitch)) {
						throwError({}, Messages.IllegalBreak);
					}

					return delegate.createBreakStatement(null);
				}

				if (peekLineTerminator()) {
					if (!(state.inIteration || state.inSwitch)) {
						throwError({}, Messages.IllegalBreak);
					}

					return delegate.createBreakStatement(null);
				}

				if (lookahead.type === Token.Identifier) {
					label = parseVariableIdentifier();

					key = '$' + label.name;
					if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
						throwError({}, Messages.UnknownLabel, label.name);
					}
				}

				consumeSemicolon();

				if (label === null && !(state.inIteration || state.inSwitch)) {
					throwError({}, Messages.IllegalBreak);
				}

				return delegate.createBreakStatement(label);
			}

			// 12.9 The return statement

			function parseReturnStatement() {
				var argument = null;

				expectKeyword('return');

				if (!state.inFunctionBody) {
					throwErrorTolerant({}, Messages.IllegalReturn);
				}

				// 'return' followed by a space and an identifier is very common.
				if (source.charCodeAt(index) === 32) {
					if (isIdentifierStart(source.charCodeAt(index + 1))) {
						argument = parseExpression();
						consumeSemicolon();
						return delegate.createReturnStatement(argument);
					}
				}

				if (peekLineTerminator()) {
					return delegate.createReturnStatement(null);
				}

				if (!match(';')) {
					if (!match('}') && lookahead.type !== Token.EOF) {
						argument = parseExpression();
					}
				}

				consumeSemicolon();

				return delegate.createReturnStatement(argument);
			}

			// 12.10 The with statement

			function parseWithStatement() {
				var object,
				body;

				if (strict) {
					throwErrorTolerant({}, Messages.StrictModeWith);
				}

				expectKeyword('with');

				expect('(');

				object = parseExpression();

				expect(')');

				body = parseStatement();

				return delegate.createWithStatement(object, body);
			}

			// 12.10 The swith statement

			function parseSwitchCase() {
				var test,
				consequent = [],
				statement;

				skipComment();
				delegate.markStart();
				if (matchKeyword('default')) {
					lex();
					test = null;
				} else {
					expectKeyword('case');
					test = parseExpression();
				}
				expect(':');
				while (index < length) {
					if (match('}') || matchKeyword('default') || matchKeyword('case')) {
						break;
					}
					statement = parseStatement();
					consequent.push(statement);
				}

				return delegate.markEnd(delegate.createSwitchCase(test, consequent));
			}

			function parseSwitchStatement() {
				var discriminant,
				cases,
				clause,
				oldInSwitch,
				defaultFound;

				expectKeyword('switch');

				expect('(');

				discriminant = parseExpression();

				expect(')');

				expect('{');

				cases = [];

				if (match('}')) {
					lex();
					return delegate.createSwitchStatement(discriminant, cases);
				}

				oldInSwitch = state.inSwitch;
				state.inSwitch = true;
				defaultFound = false;
				while (index < length) {
					if (match('}')) {
						break;
					}
					clause = parseSwitchCase();
					if (clause.test === null) {
						if (defaultFound) {
							throwError({}, Messages.MultipleDefaultsInSwitch);
						}
						defaultFound = true;
					}
					cases.push(clause);
				}

				state.inSwitch = oldInSwitch;

				expect('}');

				return delegate.createSwitchStatement(discriminant, cases);
			}

			// 12.13 The throw statement

			function parseThrowStatement() {
				var argument;

				expectKeyword('throw');

				if (peekLineTerminator()) {
					throwError({}, Messages.NewlineAfterThrow);
				}

				argument = parseExpression();

				consumeSemicolon();

				return delegate.createThrowStatement(argument);
			}

			// 12.14 The try statement

			function parseCatchClause() {
				var param,
				body;

				skipComment();
				delegate.markStart();
				expectKeyword('catch');

				expect('(');
				if (match(')')) {
					throwUnexpected(lookahead);
				}

				param = parseVariableIdentifier();
				// 12.14.1
				if (strict && isRestrictedWord(param.name)) {
					throwErrorTolerant({}, Messages.StrictCatchVariable);
				}

				expect(')');
				body = parseBlock();
				return delegate.markEnd(delegate.createCatchClause(param, body));
			}

			function parseTryStatement() {
				var block,
				handlers = [],
				finalizer = null;

				expectKeyword('try');

				block = parseBlock();

				if (matchKeyword('catch')) {
					handlers.push(parseCatchClause());
				}

				if (matchKeyword('finally')) {
					lex();
					finalizer = parseBlock();
				}

				if (handlers.length === 0 && !finalizer) {
					throwError({}, Messages.NoCatchOrFinally);
				}

				return delegate.createTryStatement(block, [], handlers, finalizer);
			}

			// 12.15 The debugger statement

			function parseDebuggerStatement() {
				expectKeyword('debugger');

				consumeSemicolon();

				return delegate.createDebuggerStatement();
			}

			// 12 Statements

			function parseStatement() {
				var type = lookahead.type,
				expr,
				labeledBody,
				key;

				if (type === Token.EOF) {
					throwUnexpected(lookahead);
				}

				skipComment();
				delegate.markStart();

				if (type === Token.Punctuator) {
					switch (lookahead.value) {
					case ';':
						return delegate.markEnd(parseEmptyStatement());
					case '{':
						return delegate.markEnd(parseBlock());
					case '(':
						return delegate.markEnd(parseExpressionStatement());
					default:
						break;
					}
				}

				if (type === Token.Keyword) {
					switch (lookahead.value) {
					case 'break':
						return delegate.markEnd(parseBreakStatement());
					case 'continue':
						return delegate.markEnd(parseContinueStatement());
					case 'debugger':
						return delegate.markEnd(parseDebuggerStatement());
					case 'do':
						return delegate.markEnd(parseDoWhileStatement());
					case 'for':
						return delegate.markEnd(parseForStatement());
					case 'function':
						return delegate.markEnd(parseFunctionDeclaration());
					case 'if':
						return delegate.markEnd(parseIfStatement());
					case 'return':
						return delegate.markEnd(parseReturnStatement());
					case 'switch':
						return delegate.markEnd(parseSwitchStatement());
					case 'throw':
						return delegate.markEnd(parseThrowStatement());
					case 'try':
						return delegate.markEnd(parseTryStatement());
					case 'var':
						return delegate.markEnd(parseVariableStatement());
					case 'while':
						return delegate.markEnd(parseWhileStatement());
					case 'with':
						return delegate.markEnd(parseWithStatement());
					default:
						break;
					}
				}

				expr = parseExpression();

				// 12.12 Labelled Statements
				if ((expr.type === Syntax.Identifier) && match(':')) {
					lex();

					key = '$' + expr.name;
					if (Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
						throwError({}, Messages.Redeclaration, 'Label', expr.name);
					}

					state.labelSet[key] = true;
					labeledBody = parseStatement();
					delete state.labelSet[key];
					return delegate.markEnd(delegate.createLabeledStatement(expr, labeledBody));
				}

				consumeSemicolon();

				return delegate.markEnd(delegate.createExpressionStatement(expr));
			}

			// 13 Function Definition

			function parseFunctionSourceElements() {
				var sourceElement,
				sourceElements = [],
				token,
				directive,
				firstRestricted,
				oldLabelSet,
				oldInIteration,
				oldInSwitch,
				oldInFunctionBody;

				skipComment();
				delegate.markStart();
				expect('{');
				while (index < length) {
					if (lookahead.type !== Token.StringLiteral) {
						break;
					}
					token = lookahead;

					sourceElement = parseSourceElement();
					sourceElements.push(sourceElement);
					if (sourceElement.expression.type !== Syntax.Literal) {
						// this is not directive
						break;
					}
					directive = source.slice(token.range[0] + 1, token.range[1] - 1);
					if (directive === 'use strict') {
						strict = true;
						if (firstRestricted) {
							throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);
						}
					} else {
						if (!firstRestricted && token.octal) {
							firstRestricted = token;
						}
					}
				}

				oldLabelSet = state.labelSet;
				oldInIteration = state.inIteration;
				oldInSwitch = state.inSwitch;
				oldInFunctionBody = state.inFunctionBody;

				state.labelSet = {};
				state.inIteration = false;
				state.inSwitch = false;
				state.inFunctionBody = true;
				while (index < length) {
					if (match('}')) {
						break;
					}
					sourceElement = parseSourceElement();
					if (typeof sourceElement === 'undefined') {
						break;
					}
					sourceElements.push(sourceElement);
				}

				expect('}');

				state.labelSet = oldLabelSet;
				state.inIteration = oldInIteration;
				state.inSwitch = oldInSwitch;
				state.inFunctionBody = oldInFunctionBody;

				return delegate.markEnd(delegate.createBlockStatement(sourceElements));
			}

			function parseParams(firstRestricted) {
				var param,
				params = [],
				token,
				stricted,
				paramSet,
				key,
				message;
				expect('(');

				if (!match(')')) {
					paramSet = {};
					while (index < length) {
						token = lookahead;
						param = parseVariableIdentifier();
						key = '$' + token.value;
						if (strict) {
							if (isRestrictedWord(token.value)) {
								stricted = token;
								message = Messages.StrictParamName;
							}
							if (Object.prototype.hasOwnProperty.call(paramSet, key)) {
								stricted = token;
								message = Messages.StrictParamDupe;
							}
						} else if (!firstRestricted) {
							if (isRestrictedWord(token.value)) {
								firstRestricted = token;
								message = Messages.StrictParamName;
							} else if (isStrictModeReservedWord(token.value)) {
								firstRestricted = token;
								message = Messages.StrictReservedWord;
							} else if (Object.prototype.hasOwnProperty.call(paramSet, key)) {
								firstRestricted = token;
								message = Messages.StrictParamDupe;
							}
						}
						params.push(param);
						paramSet[key] = true;
						if (match(')')) {
							break;
						}
						expect(',');
					}
				}

				expect(')');

				return {
					params : params,
					stricted : stricted,
					firstRestricted : firstRestricted,
					message : message
				};
			}

			function parseFunctionDeclaration() {
				var id,
				params = [],
				body,
				token,
				stricted,
				tmp,
				firstRestricted,
				message,
				previousStrict;

				skipComment();
				delegate.markStart();

				expectKeyword('function');
				token = lookahead;
				id = parseVariableIdentifier();
				if (strict) {
					if (isRestrictedWord(token.value)) {
						throwErrorTolerant(token, Messages.StrictFunctionName);
					}
				} else {
					if (isRestrictedWord(token.value)) {
						firstRestricted = token;
						message = Messages.StrictFunctionName;
					} else if (isStrictModeReservedWord(token.value)) {
						firstRestricted = token;
						message = Messages.StrictReservedWord;
					}
				}

				tmp = parseParams(firstRestricted);
				params = tmp.params;
				stricted = tmp.stricted;
				firstRestricted = tmp.firstRestricted;
				if (tmp.message) {
					message = tmp.message;
				}

				previousStrict = strict;
				body = parseFunctionSourceElements();
				if (strict && firstRestricted) {
					throwError(firstRestricted, message);
				}
				if (strict && stricted) {
					throwErrorTolerant(stricted, message);
				}
				strict = previousStrict;

				return delegate.markEnd(delegate.createFunctionDeclaration(id, params, [], body));
			}

			function parseFunctionExpression() {
				var token,
				id = null,
				stricted,
				firstRestricted,
				message,
				tmp,
				params = [],
				body,
				previousStrict;

				delegate.markStart();
				expectKeyword('function');

				if (!match('(')) {
					token = lookahead;
					id = parseVariableIdentifier();
					if (strict) {
						if (isRestrictedWord(token.value)) {
							throwErrorTolerant(token, Messages.StrictFunctionName);
						}
					} else {
						if (isRestrictedWord(token.value)) {
							firstRestricted = token;
							message = Messages.StrictFunctionName;
						} else if (isStrictModeReservedWord(token.value)) {
							firstRestricted = token;
							message = Messages.StrictReservedWord;
						}
					}
				}

				tmp = parseParams(firstRestricted);
				params = tmp.params;
				stricted = tmp.stricted;
				firstRestricted = tmp.firstRestricted;
				if (tmp.message) {
					message = tmp.message;
				}

				previousStrict = strict;
				body = parseFunctionSourceElements();
				if (strict && firstRestricted) {
					throwError(firstRestricted, message);
				}
				if (strict && stricted) {
					throwErrorTolerant(stricted, message);
				}
				strict = previousStrict;

				return delegate.markEnd(delegate.createFunctionExpression(id, params, [], body));
			}

			// 14 Program

			function parseSourceElement() {
				if (lookahead.type === Token.Keyword) {
					switch (lookahead.value) {
					case 'const':
					case 'let':
						return parseConstLetDeclaration(lookahead.value);
					case 'function':
						return parseFunctionDeclaration();
					default:
						return parseStatement();
					}
				}

				if (lookahead.type !== Token.EOF) {
					return parseStatement();
				}
			}

			function parseSourceElements() {
				var sourceElement,
				sourceElements = [],
				token,
				directive,
				firstRestricted;
				while (index < length) {
					token = lookahead;
					if (token.type !== Token.StringLiteral) {
						break;
					}

					sourceElement = parseSourceElement();
					sourceElements.push(sourceElement);
					if (sourceElement.expression.type !== Syntax.Literal) {
						// this is not directive
						break;
					}
					directive = source.slice(token.range[0] + 1, token.range[1] - 1);
					if (directive === 'use strict') {
						strict = true;
						if (firstRestricted) {
							throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);
						}
					} else {
						if (!firstRestricted && token.octal) {
							firstRestricted = token;
						}
					}
				}
				while (index < length) {
					sourceElement = parseSourceElement();
					if (typeof sourceElement === 'undefined') {
						break;
					}
					sourceElements.push(sourceElement);
				}
				return sourceElements;
			}

			function parseProgram() {
				var body;

				skipComment();
				delegate.markStart();
				strict = false;
				peek();
				body = parseSourceElements();
				return delegate.markEnd(delegate.createProgram(body));
			}

			function attachComments() {
				var i,
				attacher,
				comment,
				node;

				for (i = 0; i < extra.pendingComments.length; ++i) {
					attacher = extra.pendingComments[i];
					comment = attacher.comment;
					node = attacher.candidate;
					if (node) {
						if (typeof node.leadingComments === 'undefined') {
							node.leadingComments = [];
						}
						node.leadingComments.push(attacher.comment);
					}
				}
				extra.pendingComments = [];
			}

			function filterTokenLocation() {
				var i,
				entry,
				token,
				tokens = [];

				for (i = 0; i < extra.tokens.length; ++i) {
					entry = extra.tokens[i];
					token = {
						type : entry.type,
						value : entry.value
					};
					if (extra.range) {
						token.range = entry.range;
					}
					if (extra.loc) {
						token.loc = entry.loc;
					}
					tokens.push(token);
				}

				extra.tokens = tokens;
			}

			function LocationMarker() {
				this.marker = [index, lineNumber, index - lineStart, 0, 0, 0];
			}

			LocationMarker.prototype = {
				constructor : LocationMarker,

				end : function () {
					this.marker[3] = index;
					this.marker[4] = lineNumber;
					this.marker[5] = index - lineStart;
				},

				apply : function (node) {
					if (extra.range) {
						node.range = [this.marker[0], this.marker[3]];
					}
					if (extra.loc) {
						node.loc = {
							start : {
								line : this.marker[1],
								column : this.marker[2]
							},
							end : {
								line : this.marker[4],
								column : this.marker[5]
							}
						};
					}
					node = delegate.postProcess(node);
				}
			};

			function createLocationMarker() {
				if (!extra.loc && !extra.range) {
					return null;
				}

				skipComment();

				return new LocationMarker();
			}

			function tokenize(code, options) {
				var toString,
				token,
				tokens;

				toString = String;
				if (typeof code !== 'string' && !(code instanceof String)) {
					code = toString(code);
				}

				delegate = SyntaxTreeDelegate;
				source = code;
				index = 0;
				lineNumber = (source.length > 0) ? 1 : 0;
				lineStart = 0;
				length = source.length;
				lookahead = null;
				state = {
					allowIn : true,
					labelSet : {},
					inFunctionBody : false,
					inIteration : false,
					inSwitch : false,
					lastCommentStart : -1
				};

				extra = {};

				// Options matching.
				options = options || {};

				// Of course we collect tokens here.
				options.tokens = true;
				extra.tokens = [];
				extra.tokenize = true;
				// The following two fields are necessary to compute the Regex tokens.
				extra.openParenToken = -1;
				extra.openCurlyToken = -1;

				extra.range = (typeof options.range === 'boolean') && options.range;
				extra.loc = (typeof options.loc === 'boolean') && options.loc;

				if (typeof options.comment === 'boolean' && options.comment) {
					extra.comments = [];
				}
				if (typeof options.tolerant === 'boolean' && options.tolerant) {
					extra.errors = [];
				}

				if (length > 0) {
					if (typeof source[0] === 'undefined') {
						// Try first to convert to a string. This is good as fast path
						// for old IE which understands string indexing for string
						// literals only and not for string object.
						if (code instanceof String) {
							source = code.valueOf();
						}
					}
				}

				try {
					peek();
					if (lookahead.type === Token.EOF) {
						return extra.tokens;
					}

					token = lex();
					while (lookahead.type !== Token.EOF) {
						try {
							token = lex();
						} catch (lexError) {
							token = lookahead;
							if (extra.errors) {
								extra.errors.push(lexError);
								// We have to break on the first error
								// to avoid infinite loops.
								break;
							} else {
								throw lexError;
							}
						}
					}

					filterTokenLocation();
					tokens = extra.tokens;
					if (typeof extra.comments !== 'undefined') {
						tokens.comments = extra.comments;
					}
					if (typeof extra.errors !== 'undefined') {
						tokens.errors = extra.errors;
					}
				} catch (e) {
					throw e;
				}
				finally {
					extra = {};
				}
				return tokens;
			}

			function parse(code, options) {
				var program,
				toString;

				toString = String;
				if (typeof code !== 'string' && !(code instanceof String)) {
					code = toString(code);
				}

				delegate = SyntaxTreeDelegate;
				source = code;
				index = 0;
				lineNumber = (source.length > 0) ? 1 : 0;
				lineStart = 0;
				length = source.length;
				lookahead = null;
				state = {
					allowIn : true,
					labelSet : {},
					inFunctionBody : false,
					inIteration : false,
					inSwitch : false,
					lastCommentStart : -1,
					markerStack : []
				};

				extra = {};
				if (typeof options !== 'undefined') {
					extra.range = (typeof options.range === 'boolean') && options.range;
					extra.loc = (typeof options.loc === 'boolean') && options.loc;
					extra.attachComment = (typeof options.attachComment === 'boolean') && options.attachComment;

					if (extra.loc && options.source !== null && options.source !== undefined) {
						extra.source = toString(options.source);
					}

					if (typeof options.tokens === 'boolean' && options.tokens) {
						extra.tokens = [];
					}
					if (typeof options.comment === 'boolean' && options.comment) {
						extra.comments = [];
					}
					if (typeof options.tolerant === 'boolean' && options.tolerant) {
						extra.errors = [];
					}
					if (extra.attachComment) {
						extra.range = true;
						extra.pendingComments = [];
						extra.comments = [];
					}
				}

				if (length > 0) {
					if (typeof source[0] === 'undefined') {
						// Try first to convert to a string. This is good as fast path
						// for old IE which understands string indexing for string
						// literals only and not for string object.
						if (code instanceof String) {
							source = code.valueOf();
						}
					}
				}

				try {
					program = parseProgram();
					if (typeof extra.comments !== 'undefined') {
						program.comments = extra.comments;
					}
					if (typeof extra.tokens !== 'undefined') {
						filterTokenLocation();
						program.tokens = extra.tokens;
					}
					if (typeof extra.errors !== 'undefined') {
						program.errors = extra.errors;
					}
					if (extra.attachComment) {
						attachComments();
					}
				} catch (e) {
					throw e;
				}
				finally {
					extra = {};
				}

				return program;
			}

			// Sync with package.json and component.json.
			exports.version = '1.1.0-dev';

			exports.tokenize = tokenize;

			exports.parse = parse;

			// Deep copy.
			exports.Syntax = (function () {
				var name,
				types = {};

				if (typeof Object.create === 'function') {
					types = Object.create(null);
				}

				for (name in Syntax) {
					if (Syntax.hasOwnProperty(name)) {
						types[name] = Syntax[name];
					}
				}

				if (typeof Object.freeze === 'function') {
					Object.freeze(types);
				}

				return types;
			}
				());

		}));

	//var esprima = exports;

	(function (sandbox) {
		if (typeof esprima === 'undefined') {
			//esprima = require("esprima");
			//escodegen = require('escodegen');
			//esprima = require("../../thirdparty/esprima/esprima.js");
			//escodegen = require('../../thirdparty/escodegen/escodegen.js');
		}

		var FILESUFFIX1 = "_jalangi_";
		var COVERAGE_FILE_NAME = ext_config.recordFileTraceFolder + "jalangi_coverage";
		var SMAP_FILE_NAME = ext_config.recordFileTraceFolder + "jalangi_sourcemap";
		var PREFIX1 = "J$";
		var RP = PREFIX1 + "_";

		//    var N_LOG_LOAD = 0,
		//    var N_LOG_FUN_CALL = 1,
		//        N_LOG_METHOD_CALL = 2,
		var N_LOG_FUNCTION_ENTER = 4,
		//        N_LOG_FUNCTION_RETURN = 5,
		N_LOG_SCRIPT_ENTER = 6,
		//        N_LOG_SCRIPT_EXIT = 7,
		N_LOG_GETFIELD = 8,
		//        N_LOG_GLOBAL = 9,
		N_LOG_ARRAY_LIT = 10,
		N_LOG_OBJECT_LIT = 11,
		N_LOG_FUNCTION_LIT = 12,
		N_LOG_RETURN = 13,
		N_LOG_REGEXP_LIT = 14,
		//        N_LOG_LOCAL = 15,
		//        N_LOG_OBJECT_NEW = 16,
		N_LOG_READ = 17,
		//        N_LOG_FUNCTION_ENTER_NORMAL = 18,
		N_LOG_HASH = 19,
		N_LOG_SPECIAL = 20,
		N_LOG_STRING_LIT = 21,
		N_LOG_NUMBER_LIT = 22,
		N_LOG_BOOLEAN_LIT = 23,
		N_LOG_UNDEFINED_LIT = 24,
		N_LOG_NULL_LIT = 25;

		var logFunctionEnterFunName = PREFIX1 + ".Fe";
		var logFunctionReturnFunName = PREFIX1 + ".Fr";
		var logFunCallFunName = PREFIX1 + ".F";
		var logMethodCallFunName = PREFIX1 + ".M";
		var logAssignFunName = PREFIX1 + ".A";
		var logPutFieldFunName = PREFIX1 + ".P";
		var logGetFieldFunName = PREFIX1 + ".G";
		var logScriptEntryFunName = PREFIX1 + ".Se";
		var logScriptExitFunName = PREFIX1 + ".Sr";
		var logReadFunName = PREFIX1 + ".R";
		var logWriteFunName = PREFIX1 + ".W";
		var logIFunName = PREFIX1 + ".I";
		var logHashFunName = PREFIX1 + ".H";
		var logLitFunName = PREFIX1 + ".T";
		var logInitFunName = PREFIX1 + ".N";
		var logReturnFunName = PREFIX1 + ".Rt";
		var logReturnAggrFunName = PREFIX1 + ".Ra";
		var logUncaughtExceptionFunName = PREFIX1 + ".Ex";

		var logBinaryOpFunName = PREFIX1 + ".B";
		var logUnaryOpFunName = PREFIX1 + ".U";
		var logConditionalFunName = PREFIX1 + ".C";
		var logSwitchLeftFunName = PREFIX1 + ".C1";
		var logSwitchRightFunName = PREFIX1 + ".C2";
		var logLastFunName = PREFIX1 + "._";

		var instrumentCodeFunName = PREFIX1 + ".instrumentCode";

		var Syntax = {
			AssignmentExpression : 'AssignmentExpression',
			ArrayExpression : 'ArrayExpression',
			BlockStatement : 'BlockStatement',
			BinaryExpression : 'BinaryExpression',
			BreakStatement : 'BreakStatement',
			CallExpression : 'CallExpression',
			CatchClause : 'CatchClause',
			ConditionalExpression : 'ConditionalExpression',
			ContinueStatement : 'ContinueStatement',
			DoWhileStatement : 'DoWhileStatement',
			DebuggerStatement : 'DebuggerStatement',
			EmptyStatement : 'EmptyStatement',
			ExpressionStatement : 'ExpressionStatement',
			ForStatement : 'ForStatement',
			ForInStatement : 'ForInStatement',
			FunctionDeclaration : 'FunctionDeclaration',
			FunctionExpression : 'FunctionExpression',
			Identifier : 'Identifier',
			IfStatement : 'IfStatement',
			Literal : 'Literal',
			LabeledStatement : 'LabeledStatement',
			LogicalExpression : 'LogicalExpression',
			MemberExpression : 'MemberExpression',
			NewExpression : 'NewExpression',
			ObjectExpression : 'ObjectExpression',
			Program : 'Program',
			Property : 'Property',
			ReturnStatement : 'ReturnStatement',
			SequenceExpression : 'SequenceExpression',
			SwitchStatement : 'SwitchStatement',
			SwitchCase : 'SwitchCase',
			ThisExpression : 'ThisExpression',
			ThrowStatement : 'ThrowStatement',
			TryStatement : 'TryStatement',
			UnaryExpression : 'UnaryExpression',
			UpdateExpression : 'UpdateExpression',
			VariableDeclaration : 'VariableDeclaration',
			VariableDeclarator : 'VariableDeclarator',
			WhileStatement : 'WhileStatement',
			WithStatement : 'WithStatement'
		};

		function sanitizePath(path) {
			if (typeof process !== 'undefined' && process.platform == "win32") {
				return path.split("\\").join("\\\\")
			}
			return path
		}

		function HOP(obj, prop) {
			return Object.prototype.hasOwnProperty.call(obj, prop);
		};

		function isArr(val) {
			return Object.prototype.toString.call(val) === '[object Array]';
		}

		function MAP(arr, fun) {
			var len = arr.length;
			if (!isArr(arr)) {
				throw new TypeError();
			}
			if (typeof fun != "function") {
				throw new TypeError();
			}

			var res = new Array(len);
			for (var i = 0; i < len; i++) {
				if (i in arr) {
					res[i] = fun(arr[i]);
				}
			}
			return res;
		}

		function getCode(filename) {
			if (typeof fs == 'undefined') {
				if (ext_config.isExtensionEvn == true) {
					//fs = require('../../utils/fs.js');
				} else if (ext_config.isNodeJsEvn == true) {
					//fs = require('../../utils/fs.js');
				} else if (ext_config.isBrowserJsEvn == true) {
					throw new Error('getCode in esnstrument should not be invoked in browser js environment!');
				}
			}

			return fs.readFileSync(filename, "utf8");
		}

		var CONTEXT = {
			RHS : 1,
			IGNORE : 2,
			OEXP : 3,
			PARAMS : 4,
			OEXP2 : 5,
			GETTER : 6,
			SETTER : 7,
			// be a direct child of a typeof unary expression  // #19 fix
			TYPEOF : 8
		};

		function ignoreSubAst(node) {
			return node.type === 'CallExpression' && node.callee.type === 'MemberExpression' &&
			node.callee.object.type === 'Identifier' && node.callee.object.name === PREFIX1 &&
			node.callee.property.type === 'Identifier' && node.callee.property.name === 'I'
		}

		// need code refractoring, visitor pattern takes too much time and memory to transform code
		function transformAst(object, visitorPost, visitorPre, context, noIgnore) {
			var key,
			child,
			type,
			ret,
			newContext;

			type = object.type;
			if (visitorPre && HOP(visitorPre, type))
				visitorPre[type](object, context);

			// jacksongl-change
			for (key in object) {
				if (object.hasOwnProperty(key)) {
					child = object[key];
					if (typeof child === 'object' && child !== null && key !== "scope" && (noIgnore || !ignoreSubAst(object))) {
						if ((type === 'AssignmentExpression' && key === 'left') ||
							(type === 'UpdateExpression' && key === 'argument') ||
							(type === 'UnaryExpression' && key === 'argument' && object.operator === 'delete') ||
							(type === 'ForInStatement' && key === 'left') ||
							((type === 'FunctionExpression' || type === 'FunctionDeclaration') && key === 'id') ||
							(type === 'LabeledStatement' && key === 'label') ||
							(type === 'BreakStatement' && key === 'label') ||
							(type === 'CatchClause' && key === 'param') ||
							(type === 'ContinueStatement' && key === 'label') ||
							((type === 'CallExpression' || type === 'NewExpression') &&
								key === 'callee' &&
								(object.callee.type === 'MemberExpression' ||
									(object.callee.type === 'Identifier' && object.callee.name === 'eval'))) ||
							(type === 'VariableDeclarator' && key === 'id') ||
							(type === 'MemberExpression' && !object.computed && key === 'property')) {
							newContext = CONTEXT.IGNORE;
						} else if (type === 'ObjectExpression' && key === 'properties') {
							newContext = CONTEXT.OEXP;
						} else if ((type === 'FunctionExpression' || type === 'FunctionDeclaration') && key === 'params') {
							newContext = CONTEXT.PARAMS;
						} else if (context === CONTEXT.OEXP) {
							newContext = CONTEXT.OEXP2;
						} else if (context === CONTEXT.OEXP2 && key === 'key') {
							newContext = CONTEXT.IGNORE;
						} else if (context === CONTEXT.PARAMS) {
							newContext = CONTEXT.IGNORE;
						} else if (type === 'Property' && key === 'value' && object.kind === 'get') {
							newContext = CONTEXT.GETTER;
						} else if (type === 'Property' && key === 'value' && object.kind === 'set') {
							newContext = CONTEXT.SETTER;
						} else if (type === 'UnaryExpression' && object.operator === 'typeof') {
							newContext = CONTEXT.TYPEOF;
						} else {
							newContext = CONTEXT.RHS;
						}
						if (object.inst === false) {}
						else {
							object[key] = transformAst(child, visitorPost, visitorPre, newContext, noIgnore);
						}
					}
				}
			}

			if (visitorPost && HOP(visitorPost, type))
				ret = visitorPost[type](object, context);
			else
				ret = object;

			return ret;

		}

		var filename;

		// J$_i in expression context will replace it by an AST
		// {J$_i} will replace the body of the block statement with an array of statements passed as argument


		function VisitorReplaceInExpr(asts) {
			this.asts2 = asts;
			this.Identifier = this.constructor.prototype.Identifier;
			this.BlockStatement = this.constructor.prototype.BlockStatement;
		}

		VisitorReplaceInExpr.prototype.Identifier = function (node) {
			if (node.name.indexOf(RP) === 0) {
				var i = parseInt(node.name.substring(RP.length));
				return this.asts2[i];
			} else {
				return node;
			}
		};

		VisitorReplaceInExpr.prototype.BlockStatement = function (node) {
			if (node.body[0].type === 'ExpressionStatement' && isArr(node.body[0].expression)) {
				node.body = node.body[0].expression;
			}
			return node;
		};

		// J$_i in expression context will replace it by an AST
		// {J$_i} will replace the body of the block statement with an array of statements passed as argument

		function replaceInStatement(code) {
			var asts = [];
			for (var i = 0; i < arguments.length; i++) {
				asts.push(arguments[i])
			}

			// perhaps here we can refine the statement
			var visitorReplaceInExpr = new VisitorReplaceInExpr(asts);
			var ast = esprima.parse(code);
			var newAst = transformAst(ast, visitorReplaceInExpr, undefined, undefined, true);
			//console.log(newAst);
			return newAst.body;
		}

		function replaceInExpr(code) {
			var ret = replaceInStatement.apply(this, arguments);
			return ret[0].expression;
		}

		function createLiteralAst(name) {
			return {
				type : Syntax.Literal,
				value : name
			};
		}

		function createIdentifierAst(name) {
			return {
				type : Syntax.Identifier,
				name : name
			};
		}

		function transferLoc(newNode, oldNode) {
			if (oldNode.loc)
				newNode.loc = oldNode.loc;
			if (oldNode.raw)
				newNode.raw = oldNode.loc;
		}

		var inc = 4;
		var condCount = 0 + inc;
		var iid = 1 + inc;
		var opIid = 2 + inc;

		function setBaseIid(n_iid) {
			iid = n_iid * 100000;
			opIid = n_iid * 100000;
		}

		function getIid() {
			var tmpIid = iid;
			iid = iid + inc;
			return createLiteralAst(tmpIid);
		}

		function getPrevIidNoInc() {
			return createLiteralAst(iid - inc);
		}

		function getCondIid() {
			var tmpIid = condCount;
			condCount = condCount + inc;
			return createLiteralAst(tmpIid);
		}

		function getOpIid() {
			var tmpIid = opIid;
			opIid = opIid + inc;
			return createLiteralAst(tmpIid);
		}

		function writeLineToIIDMap(str) {
			if (traceWfh) {
				fs.writeSync(traceWfh, str);
			}
		}

		/**
		 * if not yet open, open the IID map file and write the header.
		 * @param {string} outputDir an optional output directory for the sourcemap file
		 */
		function openIIDMapFile(outputDir) {}
		
		var curFileName = null;
		var orig2Inst = {};
		var iidSourceInfo = {};

		/**
		 * if open, write footer and close IID map file
		 */
		function closeIIDMapFile() {
			if (traceWfh) {
				writeLineToIIDMap("}(typeof " + PREFIX1 + " === 'undefined'? " + PREFIX1 + " = {}:" + PREFIX1 + "));\n");
				fs.closeSync(traceWfh);
				traceWfh = undefined;
			}
		}

		function printLineInfoAux(i, ast) {
			if (ast && ast.loc) {
				iidSourceInfo[i] = [curFileName, ast.loc.start.line, ast.loc.start.column+1, ast.loc.end.column+1];
				//writeLineToIIDMap('iids[' + i + '] = [filename,' + (ast.loc.start.line) + "," + (ast.loc.start.column + 1) + "];\n");
			}
		}

		function printIidToLoc(ast0) {
			printLineInfoAux(iid, ast0);
		}

		function printOpIidToLoc(ast0) {
			printLineInfoAux(opIid, ast0);
		}

		function printCondIidToLoc(ast0) {
			printLineInfoAux(condCount, ast0);
		}

		var traceWfh;
		var fs;

		function openFile() {
			//if (traceWfh === undefined) {
			// make sure the previous sourcemap file has been closed;
			//    try{
			//        closeFile();
			//    } catch(e) {}
			//}

			fs = {};

			fs.writeFileSync = function () {};
			fs.readFileSync = function () {
				return null;
			};
		}

		function writeLine(str) {
			if (traceWfh) {
				fs.writeSync(traceWfh, str);
			}
		}

		function closeFile() {
			if (traceWfh) {
				fs.closeSync(traceWfh);
			}
		}

		function wrapPutField(node, base, offset, rvalue) {
			printIidToLoc(node);
			var ret = replaceInExpr(
					logPutFieldFunName +
					"(" + RP + "1, " + RP + "2, " + RP + "3, " + RP + "4)",
					getIid(),
					base,
					offset,
					rvalue);
			transferLoc(ret, node);
			return ret;
		}

		function wrapModAssign(node, base, offset, op, rvalue) {
			printIidToLoc(node);
			var ret = replaceInExpr(
					logAssignFunName + "(" + RP + "1," + RP + "2," + RP + "3," + RP + "4)(" + RP + "5)",
					getIid(),
					base,
					offset,
					createLiteralAst(op),
					rvalue);
			transferLoc(ret, node);
			return ret;
		}

		function wrapMethodCall(node, base, offset, isCtor) {
			printIidToLoc(node);
			var ret = replaceInExpr(
					logMethodCallFunName + "(" + RP + "1, " + RP + "2, " + RP + "3, " + (isCtor ? "true" : "false") + ")",
					getIid(),
					base,
					offset);
			transferLoc(ret, node);
			return ret;
		}

		function wrapFunCall(node, ast, isCtor) {
			printIidToLoc(node);
			var ret = replaceInExpr(
					logFunCallFunName + "(" + RP + "1, " + RP + "2, " + (isCtor ? "true" : "false") + ")",
					getIid(),
					ast);
			transferLoc(ret, node);
			return ret;
		}

		function wrapGetField(node, base, offset) {
			printIidToLoc(node);
			var ret = replaceInExpr(
					logGetFieldFunName + "(" + RP + "1, " + RP + "2, " + RP + "3)",
					getIid(),
					base,
					offset);
			transferLoc(ret, node);
			return ret;
		}

		function wrapRead(node, name, val, isReUseIid, isGlobal) {
			printIidToLoc(node);
			var ret = replaceInExpr(
					logReadFunName + "(" + RP + "1, " + RP + "2, " + RP + "3," + (isGlobal ? "true" : "false") + ")",
					isReUseIid ? getPrevIidNoInc() : getIid(),
					name,
					val);
			transferLoc(ret, node);
			return ret;
		}

		//    function wrapReadWithUndefinedCheck(node, name) {
		//        var ret = replaceInExpr(
		//            "("+logIFunName+"(typeof ("+name+") === 'undefined'? "+RP+"2 : "+RP+"3))",
		//            createIdentifierAst(name),
		//            wrapRead(node, createLiteralAst(name),createIdentifierAst("undefined")),
		//            wrapRead(node, createLiteralAst(name),createIdentifierAst(name), true)
		//        );
		//        transferLoc(ret, node);
		//        return ret;
		//    }

		// jacksongl-change
		function wrapReadWithUndefinedCheck(node, name, context) {
			var ret;
			//if (context && context == CONTEXT.TYPEOF) {
			if (true) {
				if (name !== 'location') {
					ret = replaceInExpr(
							"(" + logIFunName + "(typeof (" + name + ") === 'undefined'? (" + name + "=" + RP + "2) : (" + name + "=" + RP + "3)))",
							createIdentifierAst(name),
							wrapRead(node, createLiteralAst(name), createIdentifierAst("undefined"), false, true),
							wrapRead(node, createLiteralAst(name), createIdentifierAst(name), true, true));
				} else {
					ret = replaceInExpr(
							"(" + logIFunName + "(typeof (" + name + ") === 'undefined'? (" + RP + "2) : (" + RP + "3)))",
							createIdentifierAst(name),
							wrapRead(node, createLiteralAst(name), createIdentifierAst("undefined"), false, true),
							wrapRead(node, createLiteralAst(name), createIdentifierAst(name), true, true));
				}
			} else {
				if (name !== 'location') {
					ret = replaceInExpr(
							//"(eval('try{" + name + "}catch(e){J$.Ru();}'),(" + name + "=" + RP + "3))",
							//"(eval('try{" + name + "}catch(e){J$.Ru(\\\'" + name + "\\\');}'),(" + logIFunName + "(typeof (" + name + ") === 'undefined'? (" + name + "=" + RP + "2) : (" + name + "=" + RP + "3))))",
							"(((function (){\'J$-no-inst\';try{" + name + "}catch(e){J$.Ru(\'" + name + "\');} })(\'J$-no-inst\')),(" + logIFunName + "(typeof (" + name + ") === 'undefined'? ((" + RP + "3),(" + name + "=" + RP + "2)) : (" + name + "=" + RP + "3))))",
							//"((function(){try{window = window;}catch(e){test;}})())",
							createIdentifierAst(name),
							wrapRead(node, createLiteralAst(name), createIdentifierAst("undefined"), false, true),
							wrapRead(node, createLiteralAst(name), createIdentifierAst(name), true, true));
				} else {
					ret = replaceInExpr(
							//"(try {" + name + ";}catch(e) {" + logReadUndeclaredFunName + "("+getIid()+","+name+");},(" + RP + "3))",
							//"(eval('try{" + name + "}catch(e){J$.Ru(\\\'" + name + "\\\');}')," + "(" + logIFunName + "(typeof (" + name + ") === 'undefined'? (" + RP + "2) : (" + RP + "3))))",
							"(((function (){\'J$-no-inst\';try{" + name + "}catch(e){J$.Ru(\'" + name + "\');} })(\'J$-no-inst\'))," + "(" + logIFunName + "(typeof (" + name + ") === 'undefined'? (" + RP + "2) : (" + RP + "3))))",
							createIdentifierAst(name),
							wrapRead(node, createLiteralAst(name), createIdentifierAst("undefined"), false, true),
							wrapRead(node, createLiteralAst(name), createIdentifierAst(name), true, true));
				}
			}

			transferLoc(ret, node);
			return ret;
		}

		/*
		function wrapReadWithUndefinedCheck(node, name) {
		var ret;

		if (name !== 'location') {
		ret = replaceInExpr(
		"(" + logIFunName + "(typeof (" + name + ") === 'undefined'? (" + name + "=" + RP + "2) : (" + name + "=" + RP + "3)))",
		createIdentifierAst(name),
		wrapRead(node, createLiteralAst(name), createIdentifierAst("undefined"), false, true),
		wrapRead(node, createLiteralAst(name), createIdentifierAst(name), true, true)
		);
		} else {
		ret = replaceInExpr(
		"(" + logIFunName + "(typeof (" + name + ") === 'undefined'? (" + RP + "2) : (" + RP + "3)))",
		createIdentifierAst(name),
		wrapRead(node, createLiteralAst(name), createIdentifierAst("undefined"), false, true),
		wrapRead(node, createLiteralAst(name), createIdentifierAst(name), true, true)
		);
		}
		transferLoc(ret, node);
		return ret;
		}*/

		function wrapWrite(node, name, val, lhs) {
			printIidToLoc(node);
			var ret = replaceInExpr(
					logWriteFunName + "(" + RP + "1, " + RP + "2, " + RP + "3, " + RP + "4)",
					getIid(),
					name,
					val,
					lhs);
			transferLoc(ret, node);
			return ret;
		}

		function wrapWriteWithUndefinedCheck(node, name, val, lhs) {
			printIidToLoc(node);
			//        var ret2 = replaceInExpr(
			//            "("+logIFunName+"(typeof ("+name+") === 'undefined'? "+RP+"2 : "+RP+"3))",
			//            createIdentifierAst(name),
			//            wrapRead(node, createLiteralAst(name),createIdentifierAst("undefined")),
			//            wrapRead(node, createLiteralAst(name),createIdentifierAst(name), true)
			//        );
			var ret = replaceInExpr(
					logWriteFunName + "(" + RP + "1, " + RP + "2, " + RP + "3, " + logIFunName + "(typeof(" + lhs.name + ")==='undefined'?undefined:" + lhs.name + "))",
					getIid(),
					name,
					val);
			transferLoc(ret, node);
			return ret;
		}

		function wrapRHSOfModStore(node, left, right, op) {
			var ret = replaceInExpr(RP + "1 " + op + " " + RP + "2",
					left, right);
			transferLoc(ret, node);
			return ret;
		}

		function makeNumber(node, left) {
			var ret = replaceInExpr(" + " + RP + "1 ", left);
			transferLoc(ret, node);
			return ret;
		}

		function wrapLHSOfModStore(node, left, right) {
			var ret = replaceInExpr(RP + "1 = " + RP + "2",
					left, right);
			transferLoc(ret, node);
			return ret;
		}

		function wrapLiteral(node, ast, funId) {
			printIidToLoc(node);
			var ret = replaceInExpr(
					logLitFunName + "(" + RP + "1, " + RP + "2, " + RP + "3)",
					getIid(),
					ast,
					createLiteralAst(funId));
			transferLoc(ret, node);
			return ret;
		}

		function wrapReturn(node, expr) {
			var lid = (expr === null) ? node : expr;
			printIidToLoc(lid);
			if (expr === null) {
				expr = createIdentifierAst("undefined");
			}
			var ret = replaceInExpr(
					logReturnFunName + "(" + RP + "1, " + RP + "2)",
					getIid(),
					expr);
			transferLoc(ret, lid);
			return ret;
		}

		function wrapHash(node, ast) {
			printIidToLoc(node);
			var ret = replaceInExpr(
					logHashFunName + "(" + RP + "1, " + RP + "2)",
					getIid(),
					ast);
			transferLoc(ret, node);
			return ret;
		}

		function wrapEvalArg(ast) {
		    printIidToLoc(ast);
			var ret = replaceInExpr(
					instrumentCodeFunName+"(" + RP + "1, " + PREFIX1 + ".getConcrete("+ RP + "2), true)",
					//PREFIX1 + ".getConcrete(" + RP + "1)",
					getIid(),
					ast);
			transferLoc(ret, ast);
			return ret;
		}

		function wrapUnaryOp(node, argument, operator) {
			printOpIidToLoc(node);
			var ret = replaceInExpr(
					logUnaryOpFunName + "(" + RP + "1," + RP + "2," + RP + "3)",
					getOpIid(),
					createLiteralAst(operator),
					argument);
			transferLoc(ret, node);
			return ret;
		}

		function wrapBinaryOp(node, left, right, operator) {
			printOpIidToLoc(node);
			var ret = replaceInExpr(
					logBinaryOpFunName + "(" + RP + "1, " + RP + "2, " + RP + "3, " + RP + "4)",
					getOpIid(),
					createLiteralAst(operator),
					left,
					right);
			transferLoc(ret, node);
			return ret;
		}

		function wrapLogicalAnd(node, left, right) {
			printCondIidToLoc(node);
			var ret = replaceInExpr(
					logConditionalFunName + "(" + RP + "1, " + RP + "2)?" + RP + "3:" + logLastFunName + "()",
					getCondIid(),
					left,
					right);
			transferLoc(ret, node);
			return ret;
		}

		function wrapLogicalOr(node, left, right) {
			printCondIidToLoc(node);
			var ret = replaceInExpr(
					logConditionalFunName + "(" + RP + "1, " + RP + "2)?" + logLastFunName + "():" + RP + "3",
					getCondIid(),
					left,
					right);
			transferLoc(ret, node);
			return ret;
		}

		function wrapSwitchDiscriminant(node, discriminant) {
			printCondIidToLoc(node);
			var ret = replaceInExpr(
					logSwitchLeftFunName + "(" + RP + "1, " + RP + "2)",
					getCondIid(),
					discriminant);
			transferLoc(ret, node);
			return ret;
		}

		function wrapSwitchTest(node, test) {
			printCondIidToLoc(node);
			var ret = replaceInExpr(
					logSwitchRightFunName + "(" + RP + "1, " + RP + "2)",
					getCondIid(),
					test);
			transferLoc(ret, node);
			return ret;
		}

		function wrapConditional(node, test) {
			if (node === null) {
				return node;
			} // to handle for(;;) ;

			printCondIidToLoc(node);
			var ret = replaceInExpr(
					logConditionalFunName + "(" + RP + "1, " + RP + "2)",
					getCondIid(),
					test);
			transferLoc(ret, node);
			return ret;
		}

		function createCallWriteAsStatement(node, name, val) {
			printIidToLoc(node);
			var ret = replaceInStatement(
					logWriteFunName + "(" + RP + "1, " + RP + "2, " + RP + "3)",
					getIid(),
					name,
					val);
			transferLoc(ret[0].expression, node);
			return ret;
		}

		function createCallInitAsStatement(node, name, val, isArgumentSync) {
			printIidToLoc(node);
			var ret;

			if (isArgumentSync)
				ret = replaceInStatement(
						RP + "1 = " + logInitFunName + "(" + RP + "2, " + RP + "3, " + RP + "4, " + isArgumentSync + ")",
						val,
						getIid(),
						name,
						val);
			else
				ret = replaceInStatement(
						logInitFunName + "(" + RP + "1, " + RP + "2, " + RP + "3, " + isArgumentSync + ")",
						getIid(),
						name,
						val);

			transferLoc(ret[0].expression, node);
			return ret;
		}

		function createCallAsFunEnterStatement(node) {
			printIidToLoc(node);
			var ret = replaceInStatement(
					logFunctionEnterFunName + "(" + RP + "1,arguments.callee, this)",
					getIid());
			transferLoc(ret[0].expression, node);
			return ret;
		}

		function createCallAsScriptEnterStatement(node, instrumentedFileName) {
			printIidToLoc(node);
			var ret = replaceInStatement(logScriptEntryFunName + "(" + RP + "1," + RP + "2)",
					getIid(),
					createLiteralAst(instrumentedFileName));
			transferLoc(ret[0].expression, node);
			return ret;
		}

		var labelCounter = 0;

		function wrapScriptBodyWithTryCatch(node, body) {
			printIidToLoc(node);
			var l = labelCounter++;
			var ret = replaceInStatement(
					"function n() { jalangiLabel" + l + ": while(true) { try {" + RP + "1} catch(" + PREFIX1 +
					"e) { //console.log(" + PREFIX1 + "e); console.log(" +
					PREFIX1 + "e.stack);\n  " + logUncaughtExceptionFunName + "(" + RP + "2," + PREFIX1 +
					"e); } finally { if (" + logScriptExitFunName + "(" +
					RP + "3)) continue jalangiLabel" + l + ";\n else \n  break jalangiLabel" + l + ";\n }\n }}", body,
					getIid(),
					getIid());
			//console.log(JSON.stringify(ret));

			ret = ret[0].body.body;
			transferLoc(ret[0], node);
			return ret;
		}

		function wrapFunBodyWithTryCatch(node, body) {
			printIidToLoc(node);
			var l = labelCounter++;
			var ret = replaceInStatement(
					"function n() { jalangiLabel" + l + ": while(true) { try {" + RP + "1} catch(" + PREFIX1 +
					"e) { //console.log(" + PREFIX1 + "e); console.log(" +
					PREFIX1 + "e.stack);\n " + logUncaughtExceptionFunName + "(" + RP + "2," + PREFIX1 +
					"e); } finally { if (" + logFunctionReturnFunName + "(" +
					RP + "3)) continue jalangiLabel" + l + ";\n else \n  return " + logReturnAggrFunName + "();\n }\n }}", body,
					getIid(),
					getIid());
			//console.log(JSON.stringify(ret));

			ret = ret[0].body.body;
			transferLoc(ret[0], node);
			return ret;
		}

		//    function wrapScriptBodyWithTryCatch(node, body) {
		//        printIidToLoc(node);
		//        var ret = replaceInStatement("try {"+RP+"1} catch("+PREFIX1+
		//                "e) { console.log("+PREFIX1+"e); console.log("+
		//                PREFIX1+"e.stack); throw "+PREFIX1+
		//                "e; } finally { "+logScriptExitFunName+"("+
		//                RP+"2); }",
		//            body,
		//            getIid()
		//        );
		//        transferLoc(ret[0], node);
		//        return ret;
		//    }

		function prependScriptBody(node, body) {
			var n_code = "/* this transformed code will be executed along with analysis.js and plugin.js*/"
			var ret = replaceInStatement(n_code +
					"\n{" + RP + "1}\n",
					body);
			transferLoc(ret[0], node);
			return ret;
		}

		function instrumentFunctionEntryExit(node, ast) {
			var body = createCallAsFunEnterStatement(node).
				concat(syncDefuns(node, scope, false)).concat(ast);
			return body;
		}

		//    function instrumentFunctionEntryExit(node, ast) {
		//        return wrapFunBodyWithTryCatch(node, ast);
		//    }

		function instrumentScriptEntryExit(node, body0) {
			var modFile = (typeof filename === "string") ?
			filename.replace(".js", FILESUFFIX1 + ".js") :
			"internal";
			var body = createCallAsScriptEnterStatement(node, modFile).
				concat(syncDefuns(node, scope, true)).
				concat(body0);
			return body;
		}

		function syncDefuns(node, scope, isScript) {
			var ret = [];
			if (!isScript) {
				ret = ret.concat(createCallInitAsStatement(node,
							createLiteralAst("arguments"),
							createIdentifierAst("arguments"),
							true));
			}
			if (scope) {
				for (var name in scope.vars) {
					if (HOP(scope.vars, name)) {
						if (scope.vars[name] === "defun") {
							var ident = createIdentifierAst(name);
							ident.loc = scope.funLocs[name];
							ret = ret.concat(createCallInitAsStatement(node,
										createLiteralAst(name),
										wrapLiteral(ident, ident, N_LOG_FUNCTION_LIT),
										false));
						}
						if (scope.vars[name] === "arg") {
							ret = ret.concat(createCallInitAsStatement(node,
										createLiteralAst(name),
										createIdentifierAst(name),
										true));
						}
						if (scope.vars[name] === "var") {
							ret = ret.concat(createCallInitAsStatement(node,
										createLiteralAst(name),
										createIdentifierAst(name),
										false));
						}
					}
				}
			}
			return ret;
		}

		function getPropertyAsAst(ast) {
			return ast.computed ? ast.property : createLiteralAst(ast.property.name);
		}

		function instrumentCall(ast, isCtor) {
			var ret;
			if (ast.type === 'MemberExpression') {
				ret = wrapMethodCall(ast, ast.object,
						getPropertyAsAst(ast),
						isCtor);
				return ret;
			} else if (ast.type === 'Identifier' && ast.name === "eval") {
				return ast;
			} else {
				ret = wrapFunCall(ast, ast, isCtor);
				return ret;
			}
		}

		function instrumentStore(node) {
			var ret;
			if (node.left.type === 'Identifier') {
				if (scope.hasVar(node.left.name)) {
					ret = wrapWrite(node.right, createLiteralAst(node.left.name), node.right, node.left);
				} else {
					ret = wrapWriteWithUndefinedCheck(node.right, createLiteralAst(node.left.name), node.right, node.left);

				}
				node.right = ret;
				return node;
			} else {
				ret = wrapPutField(node, node.left.object, getPropertyAsAst(node.left), node.right);
				return ret;
			}
		}

		function instrumentLoadModStore(node, isNumber) {
			if (node.left.type === 'Identifier') {
				var tmp0 = instrumentLoad(node.left);
				if (isNumber) {
					tmp0 = makeNumber(node, instrumentLoad(tmp0));
				}
				var tmp1 = wrapRHSOfModStore(node.right, tmp0, node.right, node.operator.substring(0, node.operator.length - 1));

				var tmp2;
				if (scope.hasVar(node.left.name)) {
					tmp2 = wrapWrite(node.right, createLiteralAst(node.left.name), tmp1, node.left);
				} else {
					tmp2 = wrapWriteWithUndefinedCheck(node.right, createLiteralAst(node.left.name), tmp1, node.left);

				}
				tmp2 = wrapLHSOfModStore(node, node.left, tmp2);
				return tmp2;
			} else {
				var ret = wrapModAssign(node, node.left.object,
						getPropertyAsAst(node.left),
						node.operator.substring(0, node.operator.length - 1),
						node.right);
				return ret;
			}
		}

		function instrumentPreIncDec(node) {
			var right = createLiteralAst(1);
			var ret = wrapRHSOfModStore(node, node.argument, right, node.operator.substring(0, 1) + "=");
			return instrumentLoadModStore(ret, true);
		}

		function adjustIncDec(op, ast) {
			if (op === '++') {
				op = '-';
			} else {
				op = '+';
			}
			var right = createLiteralAst(1);
			var ret = wrapRHSOfModStore(ast, ast, right, op);
			return ret;
		}

		function instrumentLoad(ast) {
			var ret;
			if (ast.type === 'Identifier') {
				if (ast.name === "undefined") {
					ret = wrapLiteral(ast, ast, N_LOG_UNDEFINED_LIT);
					return ret;
				} else if (ast.name === "NaN" || ast.name === "Infinity") {
					ret = wrapLiteral(ast, ast, N_LOG_NUMBER_LIT);
					return ret;
				}
				if (ast.name === PREFIX1 ||
					ast.name === "eval") {
					return ast;
				} else if (scope.hasVar(ast.name)) {
					ret = wrapRead(ast, createLiteralAst(ast.name), ast);
					return ret;
				} else {
					ret = wrapReadWithUndefinedCheck(ast, ast.name, arguments[1]);
					return ret;
				}
			} else if (ast.type === 'MemberExpression') {
				return wrapGetField(ast, ast.object, getPropertyAsAst(ast));
			} else {
				return ast;
			}
		}

		var tryCatch = false;

		var scope;

		function setScope(node) {
			scope = node.scope;
		}

		var visitorRRPre = {
			'Program' : setScope,
			'FunctionDeclaration' : setScope,
			'FunctionExpression' : setScope
		};

		function callback_2(def) {
			if (def.init !== null) {
				var init = wrapWrite(def.init, createLiteralAst(def.id.name), def.init, def.id);
				def.init = init;
			}
			return def;
		}

		var visitorRRPost = {
			'Literal' : function (node, context) {
				if (context === CONTEXT.RHS) {

					var litType;
					switch (typeof node.value) {
					case 'number':
						litType = N_LOG_NUMBER_LIT;
						break;
					case 'string':
						litType = N_LOG_STRING_LIT;
						break;
					case 'object': // for null
						if (node.value === null)
							litType = N_LOG_NULL_LIT;
						else
							litType = N_LOG_REGEXP_LIT;
						break;
					case 'boolean':
						litType = N_LOG_BOOLEAN_LIT;
						break;
					}
					var ret1 = wrapLiteral(node, node, litType);
					return ret1;
				} else {
					return node;
				}
			},
			"Program" : function (node) {
				if (!tryCatch) {
					var ret = instrumentScriptEntryExit(node, node.body);
					node.body = ret;

				}
				scope = scope.parent;
				return node;
			},
			"VariableDeclaration" : function (node) {
				var declarations = MAP(node.declarations, callback_2);
				node.declarations = declarations;
				return node;
			},
			"NewExpression" : function (node) {
				var ret = {
					type : 'CallExpression',
					callee : instrumentCall(node.callee, true),
					'arguments' : node.arguments
				};
				transferLoc(ret, node);
				var ret1 = wrapLiteral(node, ret, N_LOG_OBJECT_LIT);
				return ret1;
			},
			"CallExpression" : function (node) {
				var isEval = node.callee.type === 'Identifier' && node.callee.name === "eval";

				if (node.callee && node.callee.object && node.callee.object.expressions && node.callee.object.expressions[0] && node.callee.object.expressions[0].arguments && node.callee.object.expressions[0].arguments[0] && node.callee.object.expressions[0].arguments[0].value === 'J$-no-inst') {
					// fix #19
					for (prop in node) {
						if (node.hasOwnProperty(prop)) {
							prop.inst = false;
						}
					}
					//node.callee.object.expressions[0].
					return node;
				} else {
					var callee = instrumentCall(node.callee, false);
					node.callee = callee;
				}

				if (isEval) {
					node.arguments = MAP(node.arguments, wrapEvalArg);
				}
				return node;
			},
			"AssignmentExpression" : function (node) {
				var ret1;
				if (node.operator === "=") {
					ret1 = instrumentStore(node);
				} else {
					ret1 = instrumentLoadModStore(node);
				}
				return ret1;
			},
			"UpdateExpression" : function (node) {
				var ret1;
				ret1 = instrumentPreIncDec(node);
				if (!node.prefix) {
					ret1 = adjustIncDec(node.operator, ret1);
				}
				return ret1;
			},
			"FunctionExpression" : function (node, context) {
				if (node.inst === false || (node.body && node.body.body && node.body.body[0] && node.body.body[0].expression && node.body.body[0].expression.value === 'J$-no-inst')) { // fix #19
					//node.body.body[0].block.body[0].inst = true;
					return node;
				}
				node.body.body = instrumentFunctionEntryExit(node, node.body.body);
				var ret1;
				if (context === CONTEXT.GETTER || context === CONTEXT.SETTER) {
					ret1 = node;
				} else {
					ret1 = wrapLiteral(node, node, N_LOG_FUNCTION_LIT);
				}
				scope = scope.parent;
				return ret1;
			},
			"FunctionDeclaration" : function (node) {
				//console.log(node.body.body);
				node.body.body = instrumentFunctionEntryExit(node, node.body.body);
				scope = scope.parent;
				return node;
			},
			"ObjectExpression" : function (node) {
				var ret1 = wrapLiteral(node, node, N_LOG_OBJECT_LIT);
				return ret1;
			},
			"ArrayExpression" : function (node) {
				var ret1 = wrapLiteral(node, node, N_LOG_ARRAY_LIT);
				return ret1;
			},
			'ThisExpression' : function (node) {
				var ret = wrapRead(node, createLiteralAst('this'), node);
				return ret;
			},
			'Identifier' : function (node, context) {
				if (context === CONTEXT.RHS || context === CONTEXT.TYPEOF) {
					var ret = instrumentLoad(node, context); // #19 fix
					return ret;
				} else {
					return node;
				}
			},
			'MemberExpression' : function (node, context) {
				if (context === CONTEXT.RHS) {
					var ret = instrumentLoad(node);
					return ret;
				} else {
					return node;
				}
			},
			"ForInStatement" : function (node) {
				var ret = wrapHash(node.right, node.right);
				node.right = ret;
				return node;
			},
			"ReturnStatement" : function (node) {
				var ret = wrapReturn(node, node.argument);
				node.argument = ret;
				return node;
			}
		}

		function funCond(node) {
			var ret = wrapConditional(node.test, node.test);
			node.test = ret;
			return node;
		}

		function callback_1(acase) {
			var test;
			if (acase.test) {
				test = wrapSwitchTest(acase.test, acase.test);
				acase.test = test;
			}
			return acase;
		}

		var visitorOps = {
			"Program" : function (node) {
				var body = wrapScriptBodyWithTryCatch(node, node.body)
					if (!tryCatch) {
						var ret = prependScriptBody(node, body);
						node.body = ret;

					}
					return node;
			},
			'BinaryExpression' : function (node) {
				var ret = wrapBinaryOp(node, node.left, node.right, node.operator);
				return ret;
			},
			'LogicalExpression' : function (node) {
				var ret;
				if (node.operator === "&&") {
					ret = wrapLogicalAnd(node, node.left, node.right);
				} else if (node.operator === "||") {
					ret = wrapLogicalOr(node, node.left, node.right);
				}
				return ret;
			},
			'UnaryExpression' : function (node) {
				var ret;
				if (node.operator === "delete" || node.operator === "void") {
					return node;
				} else {
					ret = wrapUnaryOp(node, node.argument, node.operator);
				}
				return ret;
			},
			"SwitchStatement" : function (node) {
				var dis = wrapSwitchDiscriminant(node.discriminant, node.discriminant);
				var cases = MAP(node.cases, callback_1);
				node.discriminant = dis;
				node.cases = cases;
				return node;
			},
			"FunctionExpression" : function (node) {
				if (node.inst === false || (node.body && node.body.body && node.body.body[0] && node.body.body[0].expression && node.body.body[0].expression.value === 'J$-no-inst')) { // fix #19
					//node.body.body[0].block.body[0].inst = true;
					return node;
				}
				node.body.body = wrapFunBodyWithTryCatch(node, node.body.body);
				return node;
			},
			"FunctionDeclaration" : function (node) {
				node.body.body = wrapFunBodyWithTryCatch(node, node.body.body);
				return node;
			},
			"ConditionalExpression" : funCond,
			"IfStatement" : funCond,
			"WhileStatement" : funCond,
			"DoWhileStatement" : funCond,
			"ForStatement" : funCond
		};

		function Scope(parent) {
			this.vars = {};
			this.funLocs = {};
			this.hasEval = false;
			this.hasArguments = false;
			this.parent = parent;
		}

		Scope.prototype.addVar = function (name, type, loc) {
			this.vars[name] = type;
			if (type === 'defun') {
				this.funLocs[name] = loc;
			}
		};

		Scope.prototype.hasVar = function (name) {
			var s = this;
			while (s !== null) {
				if (HOP(s.vars, name))
					return s.vars[name];
				s = s.parent;
			}
			return null;
		};

		Scope.prototype.addEval = function () {
			var s = this;
			while (s !== null) {
				s.hasEval = true;
				s = s.parent;
			}
		};

		Scope.prototype.addArguments = function () {
			var s = this;
			while (s !== null) {
				s.hasArguments = true;
				s = s.parent;
			}
		};

		Scope.prototype.usesEval = function () {
			return this.hasEval;
		};

		Scope.prototype.usesArguments = function () {
			return this.hasArguments;
		};

		function addScopes(ast) {

			var currentScope = null;

			function handleFun(node) {
				var oldScope = currentScope;
				currentScope = new Scope(currentScope);
				node.scope = currentScope;
				if (node.type === 'FunctionDeclaration') {
					oldScope.addVar(node.id.name, "defun", node.loc);
					MAP(node.params, function (param) {
						currentScope.addVar(param.name, "arg");
					})
				} else if (node.type === 'FunctionExpression') {
					if (node.id !== null) {
						currentScope.addVar(node.id.name, "lambda");
					}
					MAP(node.params, function (param) {
						currentScope.addVar(param.name, "arg");
					})
				}
			}

			function handleVar(node) {
				currentScope.addVar(node.id.name, "var");
			}

			function handleCatch(node) {
				currentScope.addVar(node.param.name, "catch");
			}

			function popScope(node) {
				currentScope = currentScope.parent;
				return node;
			}

			var visitorPre = {
				'Program' : handleFun,
				'FunctionDeclaration' : handleFun,
				'FunctionExpression' : handleFun,
				'VariableDeclarator' : handleVar,
				'CatchClause' : handleCatch
			}

			var visitorPost = {
				'Program' : popScope,
				'FunctionDeclaration' : popScope,
				'FunctionExpression' : popScope
			}

			transformAst(ast, visitorPost, visitorPre);
		}

		function transformString(code, visitorsPost, visitorsPre) {
			////console.log('[esnstrument]: esprima start parsing');
			var newAst = esprima.parse(code, {
					loc : true,
					range : true
				});
			////console.log('[esnstrument]: esprima parsing done');
			////console.log('[esnstrument]: addScopes');
			addScopes(newAst);
			////console.log('[esnstrument]: addScopes done');
			////console.log('[esnstrument]: start transforming Ast');
			var len = visitorsPost.length;
			// looks like this code snippet here is the bottleneck
			////console.log('[esnstrument]: number of ASTs: ' + len);
			for (var i = 0; i < len; i++) { // 2 visitors here
				newAst = transformAst(newAst, visitorsPost[i], visitorsPre[i], CONTEXT.RHS);
			}
			////console.log('[esnstrument]: transforming Ast done');
			return newAst;
		}

		var noInstr = "/* JALANGI DO NOT INSTRUMENT */";

		function replaceAll(str, character, replaceChar) {
			var word = str.valueOf();
			while (word.indexOf(character) != -1) {
				////console.log('[instrument]: replace ' + character + ' with ' + replaceChar);
				word = word.replace(character, replaceChar);
			}
			return word;
		}

		var fileNumber = 1;
		var sourceMapNumber = 1;
		var coverageNumber = 1;

		//generate filename
		function generateFileName() {
			return ext_config.recordFileTraceFolder + 'script_' + (fileNumber++) + '.js';
		}

		function instrumentCode(code, noTryCatchAtTop, url) {
			iidSourceInfo = {};
			// if record and replay, then use another function
			if (ext_config.isInstrumentCodeForReplay) {
				var n_code = instrumentCodeAndSaveFile(code, generateFileName(), url);
				return n_code;
			}

			////////////////// if not for record/replay //////////////////

			var oldCondCount;

			if (ext_config.is_remove_use_strict == true) {
				code = replaceAll(code, '"use strict";', "");
				code = replaceAll(code, "'use strict';", "");
				code = replaceAll(code, "'use strict'", "'tcirts esu'");
				code = replaceAll(code, '"use strict"', '"tcirts esu"');
			}

			if (code.length > ext_config.instrumentCodeLengthLimit) {
				//console.log('[esnstrument]: code length (' + code.length + ') > transform limit (' + ext_config.instrumentCodeLengthLimit + '), tranformation aborted');
				return code;
			}

			if (typeof code === "string" && !(code.indexOf(noInstr) >= 0)) {
				if (noTryCatchAtTop) {
					oldCondCount = condCount;
					condCount = 3;
				}
				tryCatch = noTryCatchAtTop;

				////console.log('[esnstrument]: start transforming code');
				var newAst = transformString(code, [visitorRRPost, visitorOps], [visitorRRPre, undefined]);
				//console.log('hoisting function declaration...');
				var hoistedFunctions = [];
				var newAst = hoistFunctionDeclaration(newAst, hoistedFunctions);
				if (hoistedFunctions.length > 0) {
					//console.log('hoisted functions: ' + hoistedFunctions.toString());
				}
				////console.log('[esnstrument]: escodegen done');
				var newCode = escodegen.generate(newAst);
				////console.log('[esnstrument]: escodegen done');
				
				//console.dir(iidSourceInfo);
				window.iidToLocationMap = iidSourceInfo;

				if (noTryCatchAtTop) {
					condCount = oldCondCount;
				}
				var ret = newCode + " " + noInstr;
				return ret;
			} else {
				return code;
			}
		}

		function hoistFunctionDeclaration(ast, hoistedFunctions) {
			var key,
			child,
			startIndex = 0;
			if (ast.body) {
				var newBody = [];
				if (ast.body.length > 0) { // do not hoist function declaration before J$.Fe or J$.Se
					if (ast.body[0].type == 'ExpressionStatement') {
						if (ast.body[0].expression.type == 'CallExpression') {
							if (ast.body[0].expression.callee.object && ast.body[0].expression.callee.object.name == 'J$'
								 && ast.body[0].expression.callee.property
								 && (ast.body[0].expression.callee.property.name == 'Se' || ast.body[0].expression.callee.property.name == 'Fe')) {

								newBody.push(ast.body[0]);
								startIndex = 1;
							}
						}
					}
				}
				for (var i = startIndex; i < ast.body.length; i++) {

					if (ast.body[i].type == 'FunctionDeclaration') {
						newBody.push(ast.body[i]);
						//if(newBody.length != i+1){
						//    hoistedFunctions.push(ast.body[i].id.name);
						//}
					}
				}
				for (var i = startIndex; i < ast.body.length; i++) {
					if (ast.body[i].type != 'FunctionDeclaration') {
						newBody.push(ast.body[i]);
					}
				}
				//while(ast.body.length>0){
				//    ast.body.pop();
				//}
				for (var i = 0; i < newBody.length; i++) {
					ast.body[i] = newBody[i];
				}
				newBody = null;
			} else {
				////console.log(typeof ast.body);
			}
			for (key in ast) {
				// jacksongl-change
				if (ast.hasOwnProperty(key)) {
					child = ast[key];
					if (typeof child === 'object' && child !== null && key !== "scope") {
						hoistFunctionDeclaration(child, hoistedFunctions);
					}

				}
			}

			return ast;
		}

		// function instrumentFile() { } funciton removed for firefox extension

		if (typeof window === 'undefined' && (typeof require !== "undefined") && require.main === module) {
			instrumentFile();
			////console.log(instrumentCode('({"f1":"hello", "f2":"world"})', true));
		} else {
			sandbox.instrumentCode = instrumentCode;
			sandbox.setBaseIid = setBaseIid;
		}
	}(esnstrument)); // be careful: exports only works for firefox extension (or node.js maybe)


	////console.log(transformString("var x = 3 * 4;", visitor1));
	////console.log(transformFile("tests/unit/instrument-test.js", [visitorRRPost, visitorOps], [visitorRRPre, undefined]));


	function replaceAll(str, character, replaceChar) {
		var word = str.valueOf();
		while (word.indexOf(character) != -1) {
			////console.log('[instrument]: replace ' + character + ' with ' + replaceChar);
			word = word.replace(character, replaceChar);
		}
		return word;
	}
	
	sandbox2.esnstrument = esnstrument;

} catch (e) {
	console.log('====!!!!!!!!!!!!!!!!' + e);
}
})(this));